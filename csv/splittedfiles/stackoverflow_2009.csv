455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	455863	"<p>If you're certain that only Javascript will be consuming the JSON, I prefer to pass Javascript <code>Date</code> objects directly.</p>  <p>The <code>ctime()</code> method on <code>datetime</code> objects will return a string that the Javascript Date object can understand.</p>  <pre><code>import datetime date = datetime.datetime.today() json = '{""mydate"":new Date(""%s"")}' % date.ctime() </code></pre>  <p>Javascript will happily use that as an object literal, and you've got your Date object built right in.</p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	456032	"<p>For cross-language projects, I found out that strings containing <a href=""http://www.ietf.org/rfc/rfc3339.txt"" rel=""noreferrer"">RfC 3339</a> dates are the best way to go. An RfC 3339 date looks like this:</p>  <pre><code>  1985-04-12T23:20:50.52Z </code></pre>  <p>I think most of the format is obvious. The only somewhat unusual thing may be the ""Z"" at the end. It stands for GMT/UTC. You could also add a timezone offset like +02:00 for CEST (Germany in summer). I personally prefer to keep everything in UTC until it is displayed.</p>  <p>For displaying, comparisons and storage you can leave it in string format across all languages. If you need the date for calculations easy to convert it back to a native date object in most language.</p>  <p>So generate the JSON like this:</p>  <pre><code>  json.dump(datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ')) </code></pre>  <p>Unfortunately, Javascript's Date constructor doesn't accept RfC 3339 strings but there are many <a href=""http://blog.dansnetwork.com/2008/11/01/javascript-iso8601rfc3339-date-parser/"" rel=""noreferrer"">parsers</a> available on the Internet.</p>  <p><a href=""https://github.com/hudora/huTools/blob/master/huTools/hujson.py"" rel=""noreferrer"">huTools.hujson</a> tries to handle the most common encoding issues you might come across in Python code including date/datetime objects while handling timezones correctly.</p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	2680060	"<p>You can add the 'default' parameter to json.dumps to handle this:</p>  <pre><code>date_handler = lambda obj: (     obj.isoformat()     if isinstance(obj, (datetime.datetime, datetime.date))     else None ) json.dumps(datetime.datetime.now(), default=date_handler) '""2010-04-20T20:08:21.634121""' </code></pre>  <p>Which is <a href=""http://en.wikipedia.org/wiki/ISO_8601"" rel=""noreferrer"">ISO 8601</a> format. </p>  <p>A more comprehensive default handler function:</p>  <pre><code>def handler(obj):     if hasattr(obj, 'isoformat'):         return obj.isoformat()     elif isinstance(obj, ...):         return ...     else:         raise TypeError, 'Object of type %s with value of %s is not JSON serializable' % (type(obj), repr(obj)) </code></pre>  <p>Update:  Added output of type as well as value.<br> Update:  Also handle date </p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	3049307	"<p>Using <code>json</code>, you can subclass JSONEncoder and override the default() method to provide your own custom serializers:</p>  <pre><code>import json import datetime  class DateTimeJSONEncoder(json.JSONEncoder):     def default(self, obj):         if isinstance(obj, datetime.datetime):             return obj.isoformat()         else:             return super(DateTimeJSONEncoder, self).default(obj) </code></pre>  <p>Then, you can call it like this:</p>  <pre><code>&gt;&gt;&gt; DateTimeJSONEncoder().encode([datetime.datetime.now()]) '[""2010-06-15T14:42:28""]' </code></pre>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	3235787	"<p>Here's a fairly complete solution for recursively encoding and decoding datetime.datetime and datetime.date objects using the standard library <code>json</code> module. This needs Python >= 2.6 since the <code>%f</code> format code in the datetime.datetime.strptime() format string is only supported in since then. For Python 2.5 support, drop the <code>%f</code> and strip the microseconds from the ISO date string before trying to convert it, but you'll loose microseconds precision, of course. For interoperability with ISO date strings from other sources, which may include a time zone name or UTC offset, you may also need to strip some parts of the date string before the conversion. For a complete parser for ISO date strings (and many other date formats) see the third-party <a href=""http://labix.org/python-dateutil"" rel=""noreferrer"">dateutil</a> module.</p>  <p>Decoding only works when the ISO date strings are values in a JavaScript literal object notation or in nested structures within an object. ISO date strings, which are items of a top-level array will <em>not</em> be decoded.</p>  <p>I.e. this works:</p>  <pre><code>date = datetime.datetime.now() &gt;&gt;&gt; json = dumps(dict(foo='bar', innerdict=dict(date=date))) &gt;&gt;&gt; json '{""innerdict"": {""date"": ""2010-07-15T13:16:38.365579""}, ""foo"": ""bar""}' &gt;&gt;&gt; loads(json) {u'innerdict': {u'date': datetime.datetime(2010, 7, 15, 13, 16, 38, 365579)}, u'foo': u'bar'} </code></pre>  <p>And this too:</p>  <pre><code>&gt;&gt;&gt; json = dumps(['foo', 'bar', dict(date=date)]) &gt;&gt;&gt; json '[""foo"", ""bar"", {""date"": ""2010-07-15T13:16:38.365579""}]' &gt;&gt;&gt; loads(json) [u'foo', u'bar', {u'date': datetime.datetime(2010, 7, 15, 13, 16, 38, 365579)}] </code></pre>  <p>But this doesn't work as expected:</p>  <pre><code>&gt;&gt;&gt; json = dumps(['foo', 'bar', date]) &gt;&gt;&gt; json '[""foo"", ""bar"", ""2010-07-15T13:16:38.365579""]' &gt;&gt;&gt; loads(json) [u'foo', u'bar', u'2010-07-15T13:16:38.365579'] </code></pre>  <p>Here's the code:</p>  <pre><code>__all__ = ['dumps', 'loads']  import datetime  try:     import json except ImportError:     import simplejson as json  class JSONDateTimeEncoder(json.JSONEncoder):     def default(self, obj):         if isinstance(obj, (datetime.date, datetime.datetime)):             return obj.isoformat()         else:             return json.JSONEncoder.default(self, obj)  def datetime_decoder(d):     if isinstance(d, list):         pairs = enumerate(d)     elif isinstance(d, dict):         pairs = d.items()     result = []     for k,v in pairs:         if isinstance(v, basestring):             try:                 # The %f format code is only supported in Python &gt;= 2.6.                 # For Python &lt;= 2.5 strip off microseconds                 # v = datetime.datetime.strptime(v.rsplit('.', 1)[0],                 #     '%Y-%m-%dT%H:%M:%S')                 v = datetime.datetime.strptime(v, '%Y-%m-%dT%H:%M:%S.%f')             except ValueError:                 try:                     v = datetime.datetime.strptime(v, '%Y-%m-%d').date()                 except ValueError:                     pass         elif isinstance(v, (dict, list)):             v = datetime_decoder(v)         result.append((k, v))     if isinstance(d, list):         return [x[1] for x in result]     elif isinstance(d, dict):         return dict(result)  def dumps(obj):     return json.dumps(obj, cls=JSONDateTimeEncoder)  def loads(obj):     return json.loads(obj, object_hook=datetime_decoder)  if __name__ == '__main__':     mytimestamp = datetime.datetime.utcnow()     mydate = datetime.date.today()     data = dict(         foo = 42,         bar = [mytimestamp, mydate],         date = mydate,         timestamp = mytimestamp,         struct = dict(             date2 = mydate,             timestamp2 = mytimestamp         )     )      print repr(data)     jsonstring = dumps(data)     print jsonstring     print repr(loads(jsonstring)) </code></pre>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	6130825	"<p>I've worked it out.</p>  <p>Let's say you have a Python datetime object, <em>d</em>, created with datetime.now(). Its value is:</p>  <pre><code>datetime.datetime(2011, 5, 25, 13, 34, 5, 787000) </code></pre>  <p>You can serialize it to JSON as an ISO 8601 datetime string:</p>  <pre><code>import json     json.dumps(d.isoformat()) </code></pre>  <p>The example datetime object would be serialized as:</p>  <pre><code>'""2011-05-25T13:34:05.787000""' </code></pre>  <p>This value, once received in the Javascript layer, can construct a Date object:</p>  <pre><code>var d = new Date(""2011-05-25T13:34:05.787000""); </code></pre>  <p>As of Javascript 1.8.5, Date objects have a toJSON method, which returns a string in a standard format. To serialize the above Javascript object back to JSON, therefore, the command would be:</p>  <pre><code>d.toJSON() </code></pre>  <p>Which would give you:</p>  <pre><code>'2011-05-25T20:34:05.787Z' </code></pre>  <p>This string, once received in Python, could be deserialized back to a datetime object:</p>  <pre><code>datetime.strptime('2011-05-25T20:34:05.787Z', '%Y-%m-%dT%H:%M:%S.%fZ') </code></pre>  <p>This results in the following datetime object, which is the same one you started with and therefore correct:</p>  <pre><code>datetime.datetime(2011, 5, 25, 20, 34, 5, 787000) </code></pre>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	20602937	"<p>On python side:</p>  <pre><code>import time, json from datetime import datetime as dt your_date = dt.now() data = json.dumps(time.mktime(your_date.timetuple())*1000) return data # data send to javascript </code></pre>  <p>On javascript side:</p>  <pre><code>var your_date = new Date(data) </code></pre>  <p>where data is result from python</p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	29744771	"<p>My advice is to use a library. There are several available at pypi.org.</p>  <p>I use this one, it it works good: <a href=""https://pypi.python.org/pypi/asjson"" rel=""nofollow"">https://pypi.python.org/pypi/asjson</a></p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	32224522	"<p>Late in the game... :) </p>  <p>A very simple solution is to patch the json module default.  For example:</p>  <pre><code>import json import datetime  json.JSONEncoder.default = lambda self,obj: (obj.isoformat() if isinstance(obj, datetime.datetime) else None) </code></pre>  <p>Now, you can use <strong>json.dumps()</strong> as if it had always supported datetime...</p>  <pre><code>json.dumps({'created':datetime.datetime.now()}) </code></pre>  <p>This makes sense if you require this extension to the json module to always kick in and wish to not change the way you or others use json serialization (either in existing code or not). </p>  <p>Note that some may consider patching libraries in that way as bad practice. Special care need to be taken in case you may wish to extend your application in more than one way - is such a case, I suggest to use the solution by ramen or JT and choose the proper json extension in each case. </p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	34685105	"<p>Not much to add to the community wiki answer, except for <strong>timestamp</strong>!</p>  <p>Javascript uses the following format:</p>  <pre><code>new Date().toJSON() // ""2016-01-08T19:00:00.123Z"" </code></pre>  <p>Python side (for the <code>json.dumps</code> handler, see the other answers):</p>  <pre><code>&gt;&gt;&gt; from datetime import datetime &gt;&gt;&gt; d = datetime.strptime('2016-01-08T19:00:00.123Z', '%Y-%m-%dT%H:%M:%S.%fZ') &gt;&gt;&gt; d datetime.datetime(2016, 1, 8, 19, 0, 0, 123000) &gt;&gt;&gt; d.isoformat() + 'Z' '2016-01-08T19:00:00.123000Z' </code></pre>  <p>If you leave that Z out, frontend frameworks like angular can not display the date in browser-local timezone:</p>  <pre><code>&gt; $filter('date')('2016-01-08T19:00:00.123000Z', 'yyyy-MM-dd HH:mm:ss') ""2016-01-08 20:00:00"" &gt; $filter('date')('2016-01-08T19:00:00.123000', 'yyyy-MM-dd HH:mm:ss') ""2016-01-08 19:00:00"" </code></pre>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	53178373	"<p>Apparently <a href=""https://stackoverflow.com/questions/10286204/the-right-json-date-format#15952652"">The “right” JSON (well JavaScript) date format</a> is 2012-04-23T18:25:43.511Z - UTC and ""Z"".  Without this JavaScript will use the web browser's local timezone when creating a Date() object from the string.</p>  <p>For a ""naive"" time (what Python calls a time with no timezone and this assumes is local) the below will <a href=""https://stackoverflow.com/questions/2720319/python-figure-out-local-timezone"">force local timezone</a> so that it can then be correctly converted to UTC:</p>  <pre><code>def default(obj):     if hasattr(obj, ""json"") and callable(getattr(obj, ""json"")):         return obj.json()     if hasattr(obj, ""isoformat"") and callable(getattr(obj, ""isoformat"")):         # date/time objects         if not obj.utcoffset():             # add local timezone to ""naive"" local time             # https://stackoverflow.com/questions/2720319/python-figure-out-local-timezone             tzinfo = datetime.now(timezone.utc).astimezone().tzinfo             obj = obj.replace(tzinfo=tzinfo)         # convert to UTC         obj = obj.astimezone(timezone.utc)         # strip the UTC offset         obj = obj.replace(tzinfo=None)         return obj.isoformat() + ""Z""     elif hasattr(obj, ""__str__"") and callable(getattr(obj, ""__str__"")):         return str(obj)     else:         print(""obj:"", obj)         raise TypeError(obj)  def dump(j, io):     json.dump(j, io, indent=2, default=default) </code></pre>  <p>why is this so hard.</p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	60791928	"<p>For the Python to JavaScript date conversion, the date object needs to be in specific ISO format, i.e. ISO format or UNIX number. If the ISO format lacks some info, then you can convert to the Unix number with Date.parse first. Moreover, Date.parse works with React as well while new Date might trigger an exception. </p>  <p>In case you have a DateTime object without milliseconds, the following needs to be considered. :</p>  <pre><code>  var unixDate = Date.parse('2016-01-08T19:00:00')    var desiredDate = new Date(unixDate).toLocaleDateString(); </code></pre>  <p>The example date could equally be a variable in the result.data object after an API call.</p>  <p>For options to display the date in the desired format (e.g. to display long weekdays) check out the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString"" rel=""nofollow noreferrer"">MDN doc</a>.</p>"
455580	JSON datetime between Python and JavaScript	javascript|python|json	2009-01-18 17:51:11.843000 UTC	"<p>I want to send a datetime.datetime object in serialized form from Python using <a href=""http://en.wikipedia.org/wiki/JSON"" rel=""noreferrer"">JSON</a> and de-serialize in JavaScript using JSON. What is the best way to do this?</p>"	71315371	"<p>Simply do this:</p> <pre><code>r = json.dumps(your_json_data, default=str) your_json_data = json.loads(r) </code></pre> <p><a href=""https://i.stack.imgur.com/i66ok.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/i66ok.png"" alt=""enter image description here"" /></a></p>"
636485	What's different between Python and Javascript regular expressions?	javascript|python|regex	2009-03-11 21:36:56.317000 UTC	"<p>Are Python and JavaScript regular expression syntax identical? </p>  <p>If not, then: </p>  <ol> <li>What are the important differences between them</li> <li>Is there a python library that ""implements"" JavaScript regexps?</li> </ol>"	636501	"<p>There is a comparison table here:</p>  <p><a href=""http://web.archive.org/web/20130830063653/http://www.regular-expressions.info:80/refflavors.html"" rel=""noreferrer"">Regex Flavor Comparison</a></p>"
636485	What's different between Python and Javascript regular expressions?	javascript|python|regex	2009-03-11 21:36:56.317000 UTC	"<p>Are Python and JavaScript regular expression syntax identical? </p>  <p>If not, then: </p>  <ol> <li>What are the important differences between them</li> <li>Is there a python library that ""implements"" JavaScript regexps?</li> </ol>"	636506	"<p><a href=""http://www.regular-expressions.info/javascript.html"" rel=""nofollow noreferrer"">http://www.regular-expressions.info/javascript.html</a> vs <a href=""http://www.regular-expressions.info/python.html"" rel=""nofollow noreferrer"">http://www.regular-expressions.info/python.html</a></p>"
636485	What's different between Python and Javascript regular expressions?	javascript|python|regex	2009-03-11 21:36:56.317000 UTC	"<p>Are Python and JavaScript regular expression syntax identical? </p>  <p>If not, then: </p>  <ol> <li>What are the important differences between them</li> <li>Is there a python library that ""implements"" JavaScript regexps?</li> </ol>"	636523	"<p><strong>Part 1</strong><br /> They are different; One difference is Python supports Unicode and Javascript doesn't.  </p>  <p><strong>Part 2</strong><br /> Read <a href=""http://oreilly.com/catalog/9780596528126/"" rel=""noreferrer"">Mastering Regular Expressions</a>.  It gives information on how to identify the back-end engines (DFA vs NFA vs Hybrid) that a regex flavour uses.  It gives tons of information on the different regex flavours out there. </p>  <p>There is <em>way</em> too much information to convey on a single SO answer, so you're better off having a solid piece of reference material on the subject.</p>"
643565	Anyone use Pyjamas (pyjs) python to javascript compiler (like GWT..)	javascript|python|gwt	2009-03-13 16:33:22.727000 UTC	<p>Has any one used this? I don't have a large background in Javascript and this lib looks like it may speed things along.</p>  <p>www.pyjs.org</p>	730960	"<p>yep. me.  i'm the lead developer.  drop by on groups.google.com ""pyjamas-dev"" and say hello.</p>"
643565	Anyone use Pyjamas (pyjs) python to javascript compiler (like GWT..)	javascript|python|gwt	2009-03-13 16:33:22.727000 UTC	<p>Has any one used this? I don't have a large background in Javascript and this lib looks like it may speed things along.</p>  <p>www.pyjs.org</p>	2642247	"<p>Yes, I've used. It's amazing! I think it's much easier to use than the Java-based GWT. I found the Google Code wiki on it very practical: <a href=""http://code.google.com/p/pyjamas/w/list"" rel=""nofollow noreferrer"">http://code.google.com/p/pyjamas/w/list</a></p>  <p>If you're just starting out with it, then definitely check out the showcase: <a href=""http://pyjs.org/showcase/Showcase.html"" rel=""nofollow noreferrer"">http://pyjs.org/showcase/Showcase.html</a> for usable snippets/widgets</p>  <p>As of now, it is not supported on M$ Windows, but runs beautifully on Linux.</p>"
643565	Anyone use Pyjamas (pyjs) python to javascript compiler (like GWT..)	javascript|python|gwt	2009-03-13 16:33:22.727000 UTC	<p>Has any one used this? I don't have a large background in Javascript and this lib looks like it may speed things along.</p>  <p>www.pyjs.org</p>	3030515	"<p>yes it works fine on windows (it's a compiler: you just need python, to run the conversion to javascript).  but if you're thinking of pyjamas-desktop, 0.6 added support for MSHTML as one of the engines, so that works too.</p>"
643565	Anyone use Pyjamas (pyjs) python to javascript compiler (like GWT..)	javascript|python|gwt	2009-03-13 16:33:22.727000 UTC	<p>Has any one used this? I don't have a large background in Javascript and this lib looks like it may speed things along.</p>  <p>www.pyjs.org</p>	13165774	"<p>Yes. I've used pyjs to build minesweeper game: <a href=""http://pymines.appspot.com/"" rel=""nofollow"">http://pymines.appspot.com/</a></p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	683481	"<p>Here's something, a Python wrapper around the SeaMonkey Javascript interpreter... <a href=""http://pypi.python.org/pypi/python-spidermonkey"" rel=""noreferrer"">http://pypi.python.org/pypi/python-spidermonkey</a></p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	683618	"<p>There's a bridge based on JavaScriptCore (from WebKit), but it's pretty incomplete: <a href=""http://code.google.com/p/pyjscore/"" rel=""nofollow noreferrer"">http://code.google.com/p/pyjscore/</a></p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	683682	"<p>How about <a href=""http://pyjs.org/"" rel=""noreferrer"">pyjs</a>?</p>  <p>From the above website:</p>  <blockquote>   <p>pyjs is a Rich Internet Application (RIA) Development Platform for both Web and Desktop. With pyjs you can write your JavaScript-powered web applications entirely in Python.</p> </blockquote>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	683928	"<p>If your just interested in sharing complex data types between javascript and python, check out <a href=""http://jsonpickle.googlecode.com/svn/docs/index.html"" rel=""noreferrer"">jsonpickle</a>. It wraps the standard Python JSON libraries, but has some smarts in serializing and deserializing Python classes and other data types.  </p>  <p>Quite a few Google App Engine projects have used this library.  <a href=""http://code.google.com/p/joose-js/"" rel=""noreferrer"">Joose</a> and <a href=""http://github.com/darwin/firepython/tree/master"" rel=""noreferrer"">FirePython</a> both incorporate jsonpickle.</p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	684376	"<p>You might also want to check out the PyPy project - they have a Python to (anything) compiler, including Python to Javascript, C, and llvm.  This allows you to write your code in Python and then compile it into Javascript as you desire.</p>  <p><a href=""http://codespeak.net/pypy"" rel=""nofollow noreferrer"">http://codespeak.net/pypy</a></p>  <p>Also, check out the informative blog:</p>  <p><a href=""http://morepypy.blogspot.com/"" rel=""nofollow noreferrer"">http://morepypy.blogspot.com/</a></p>  <p>Unfortunately though, you can't convert Javascript to Python this way.  It seems to work really well overall, they used to have a Javascript (made from compiled Python) version of the Bub'n'Bros game online (though the server has been down for a while).</p>  <p><a href=""http://bub-n-bros.sourceforge.net"" rel=""nofollow noreferrer"">http://bub-n-bros.sourceforge.net</a></p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	731196	"<p>there are two projects that allow an ""obvious"" transition between python objects and javascript objects, with ""obvious"" translations from int or float to Number and str or unicode to String: <a href=""http://code.google.com/p/pyv8"" rel=""noreferrer"">PyV8</a> and, as one writer has already mentioned: <a href=""http://pypi.python.org/pypi/python-spidermonkey"" rel=""noreferrer"">python-spidermonkey</a>.</p>  <p>there are actually two implementations of pyv8 - the original experiment was by sebastien louisel, and the second one (in active development) is by flier liu.</p>  <p>my interest in these projects has been to link them to <a href=""http://pyjs.org"" rel=""noreferrer"">pyjamas</a>, a python-to-javascript compiler, to create a JIT python accelerator.</p>  <p>so there is plenty out there - it just depends what you want to do.</p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	4788789	"<p>You could also use <code>XPCOM</code>, say in <code>XUL</code> based apps like Firefox, Thunderbird or Komodo.</p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	8181668	"<p>I was playing with Pyjon some time ago and seems manage to write Javascript's eval directly in Python and ran simple programs... Although it is not complete implementation of JS and rather an experiment. Get it here:</p>  <p><a href=""http://code.google.com/p/pyjon/"" rel=""nofollow"">http://code.google.com/p/pyjon/</a></p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	25085533	"<p><a href=""https://pypi.python.org/pypi/PyExecJS"" rel=""nofollow"">PyExecJS</a> is able to use each of PyV8, Node, JavaScriptCore, SpiderMonkey, JScript.</p>  <pre><code>&gt;&gt;&gt; import execjs &gt;&gt;&gt; execjs.eval(""'red yellow blue'.split(' ')"") ['red', 'yellow', 'blue'] &gt;&gt;&gt; execjs.get().name 'Node.js (V8)' </code></pre>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	27460269	"<p>Use <a href=""https://github.com/PiotrDabkowski/Js2Py"" rel=""nofollow"">Js2Py</a> to translate JavaScript to Python, this is the only tool available :)</p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	39096005	"<p>This question is not exactly young, but there have come up some alternatives:</p>  <ul> <li>""<a href=""http://www.skulpt.org"" rel=""noreferrer"">Skulpt</a> is an <em>entirely in-browser</em> implementation of Python.""</li> <li><a href=""https://www.brython.info"" rel=""noreferrer"">Brython</a> - ""A Python 3 implementation for client-side web programming""</li> <li><a href=""http://www.rapydscript.com"" rel=""noreferrer"">RapydScript</a> - ""Python-like JavaScript without the extra overhead or quirks""</li> <li><a href=""http://www.transcrypt.org"" rel=""noreferrer"">Transcrypt</a> - ""Lean and mean Python 3.6 to JavaScript compiler with multiple inheritance, sourcemaps, static type checking and selective operator overloading."" (also <a href=""https://github.com/JdeH/Transcrypt"" rel=""noreferrer"">on Github</a>)</li> </ul>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	49298952	"<p>Many of these projects mentioned above are dead or dying, lacking activity and interest from author side. Interesting to follow how this area develops.</p>  <p>For the record, in era of plugin based implementations, KDE camp had an attempt to solve this with plugin and non-language specific way and created the Kross <a href=""https://en.wikipedia.org/wiki/Kross_(software)"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Kross_(software)</a> - in my understanding it never took off even inside the community itself.</p>  <p>During this chicken and egg -problem time, javascript-based implementions are definately way to go. Maybe in the future we seee pure and clean, full Python support natively in browsers.</p>"
683462	Best way to integrate Python and JavaScript?	javascript|python|brython|transcrypt|rapydscript	2009-03-25 21:08:11.837000 UTC	"<p>Is it possible to integrate Python and JavaScript?  For example, imagine you wanted to be able to define classes in JavaScript and use them from Python (or vice versa).  If so, what's the best way?  I'm interested not only if this is possible but if <strong>anyone has done it within a ""serious"" project or product</strong>.</p>  <p>I'm guessing it would be possible using <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.mozilla.org/rhino/"" rel=""noreferrer"">Rhino</a>, for one example, but I'm curious whether or not anyone's ever actually done this, and if there are solutions for other platforms (especially <a href=""http://en.wikipedia.org/wiki/CPython"" rel=""noreferrer"">CPython</a>).</p>"	68497604	"<p>Many of the examples are years out of date and involve complex setup. You can give <a href=""https://github.com/extremeheat/JSPyBridge/"" rel=""nofollow noreferrer"">JSPyBridge</a> a try (full disclosure: I'm the author).</p> <p>It's a bi-directional bridge that lets you use JavaScript code from Python, and vice-versa. That means that Python code can call JS callbacks, and JS code can call Python callbacks.</p> <p>Access Python from JS, numpy + matplotlib example, with the ES6 import system:</p> <pre class=""lang-js prettyprint-override""><code>import { py, python } from 'pythonia' const np = await python('numpy') const plot = await python('matplotlib.pyplot')  // Fixing random state for reproducibility await np.random.seed(19680801) const [mu, sigma] = [100, 15] // Inline expression evaluation for operator overloading const x = await py`${mu} + ${sigma} * ${np.random.randn(10000)}`  // the histogram of the data const [n, bins, patches] = await plot.hist$(x, 50, { density: true, facecolor: 'g', alpha: 0.75 }) console.log('Distribution', await n) // Always await for all Python access await plot.show() python.exit() </code></pre> <p>Through CommonJS (without top level await):</p> <pre class=""lang-js prettyprint-override""><code>const { py, python } = require('pythonia') async function main() {   const np = await python('numpy')   const plot = await python('matplotlib.pyplot')   ...   // the rest of the code } main().then(() =&gt; python.exit()) // If you don't call this, the process won't quit by itself. </code></pre> <p>Access JS from python:</p> <pre class=""lang-py prettyprint-override""><code>from javascript import require, globalThis  chalk, fs = require(&quot;chalk&quot;), require(&quot;fs&quot;)  print(&quot;Hello&quot;, chalk.red(&quot;world!&quot;), &quot;it's&quot;, globalThis.Date().toLocaleString()) fs.writeFileSync(&quot;HelloWorld.txt&quot;, &quot;hi!&quot;) </code></pre>"
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	745745	"<p>Yes, Python is interpreted, but you can also run them as long-running applications.</p>"
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	745749	"<p>There's multiple questions here:</p>  <ol> <li>No, Python is not interpreted. The standard implementation compiles to bytecode, and then executes in a virtual machine. Many modern JavaScript engines also do this.</li> <li>Regardless of implementation (interpreter, VM, machine code), anything you want can run in the background. You can run shell scripts in the background, if you want.</li> </ol>"
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	745751	<p>Python is an interpreted language but it is the bytecode which is interpreted at run time. There are also many tools out there that can assist you in making your programs run as a windows service / UNIX daemon.</p>
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	745752	"<p>Yes, it's interpreted, its main implementation compiles bytecode first and then runs it though (kind of if you took a java source and the JVM compiled it before running it). Still, you can run your application in background. Actually, you can run pretty much anything in background.</p>"
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	745789	"<p>Technically, Python is compiled to bytecode and then interpreted in a <a href=""http://en.wikipedia.org/wiki/Virtual_machine"" rel=""noreferrer"">virtual machine</a>. If the Python compiler is able to write out the bytecode into a .pyc file, it will (usually) do so.</p>  <p>On the other hand, there's no explicit compilation step in Python as there is with Java or C. From the point of view of the developer, it looks like Python is just interpreting the .py file directly. Plus, Python offers an interactive prompt where you can type Python statements and have them executed immediately. So the workflow in Python is much more similar to that of an interpreted language than that of a compiled language. To me (and a lot of other developers, I suppose), that distinction of workflow is more important than whether there's an intermediate bytecode step or not.</p>"
745743	Is Python interpreted (like Javascript or PHP)?	python	2009-04-13 23:15:37.427000 UTC	"<p>Is Python strictly interpreted at run time, or can it be used to develop programs that run as background applications (like a Java app or C program)?</p>"	749218	"<p>As the varied responses will tell you, the line between interpreted and compiled is no longer as clear as it was when such terms were coined.  In fact, it's also something of a mistake to consider <em>languages</em> as being either interpreted or compiled, as different <em>implementations</em> of languages may do different things.  These days you can find both <a href=""http://root.cern.ch/drupal/content/cint"" rel=""noreferrer"">C interpreters</a> and <a href=""https://developer.mozilla.org/en/Rhino_JavaScript_Compiler"" rel=""noreferrer"">Javascript compilers</a>.</p>  <p>Even when looking at an implementation, things still aren't clear-cut.  There are layers of interpretation.  Here are a few of the gradations between interpreted and compiled:</p>  <ol> <li><p>Pure interpretation.  Pretty much what it says on the tin.  Read a line of source and immediately do what it says.  This isn't actually done by many production languages - pretty much just things like shell scripts.</p></li> <li><p><a href=""http://en.wikipedia.org/wiki/Tokenisation"" rel=""noreferrer"">Tokenisation</a> + interpretation.  A trivial optimisation on the above.  Rather than interpret each line from scratch, it's first tokenised (that is, rather than seeing a string like ""print 52 + x"", it's translated into a stream of tokens (eg. <code>[PRINT_STATEMENT, INTEGER(52), PLUS_SIGN, IDENTIFIER('x')]</code> ) to avoid repeatedly performing that state of interpretation.  Many versions of basic worked this way.</p></li> <li><p><a href=""http://en.wikipedia.org/wiki/Bytecode"" rel=""noreferrer"">Bytecode</a> compilation.  This is the approach taken by languages like Java and C# (though see below).  The code is transformed into instructions for a ""virtual machine"".  These instructions are then interpreted.  This is also the approach taken by python (or at least cpython, the most common implementation.) The <a href=""http://www.jython.org/Project/"" rel=""noreferrer"">Jython</a> and <a href=""http://www.codeplex.com/Wiki/View.aspx?ProjectName=IronPython"" rel=""noreferrer"">Ironpython</a> implementations also take this approach, but compile to the bytecode for the Java and C# virtual machines resepectively.</p></li> <li><p>Bytecode + <a href=""http://en.wikipedia.org/wiki/Just-in-time_compilation"" rel=""noreferrer"">Just in Time compilation</a>.  As above, but rather than interpreting the bytecodes, the code that would be performed is compiled from the bytecode at the point of execution, and then run.  In some cases, this can actually outperform native compilation, as it is free to perform runtime analysis on the code, and can use specific features of the current processor (while static compilation may need to compile for a lowest common denominator CPU).  Later versions of Java, and C# use this approach.  <a href=""http://psyco.sourceforge.net/"" rel=""noreferrer"">Psyco</a> performs this for python.</p></li> <li><p>Native machine-code compilation.  The code is compiled to the machine code of the target system.  You may think we've now completely eliminated interpretation, but even here there are subtleties.  Some machine code instructions are not actually directly implemented in hardware, but are in fact implemented via <a href=""http://en.wikipedia.org/wiki/Microcode"" rel=""noreferrer"">microcode</a> - even machine code is sometimes interpreted!</p></li> </ol>"
872366	port python code to javascript	javascript|python|porting	2009-05-16 12:45:33.240000 UTC	<pre><code>indices[i:] = indices[i+1:] + indices[i:i+1] </code></pre>  <p>Hope someone helps.</p>	872371	"<p>You will want to look at <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/slice"" rel=""nofollow noreferrer"">Array.slice()</a></p>  <pre><code>var temp=indices.slice(i+1).concat(indices.slice(i, i+1)); var arr=[]; for (var j=0; j&lt;temp.length; j++){    arr[j+i]=temp[i]; } </code></pre>"
872366	port python code to javascript	javascript|python|porting	2009-05-16 12:45:33.240000 UTC	<pre><code>indices[i:] = indices[i+1:] + indices[i:i+1] </code></pre>  <p>Hope someone helps.</p>	873737	"<p>I'm fairly new to Python but if I understand the code correctly, it reconstructs a list from a given offset into every item following offset+1 and the item at the offset.</p>  <p>Running it seems to confirm this:</p>  <pre><code>&gt;&gt;&gt; indices = ['one','two','three','four','five','six'] &gt;&gt;&gt; i = 2 &gt;&gt;&gt; indices[i:] = indices[i+1:] + indices[i:i+1] &gt;&gt;&gt; indices ['one', 'two', 'four', 'five', 'six', 'three'] </code></pre>  <p>In Javascript can be written:</p>  <pre><code>indices = indices.concat( indices.splice( i, 1 ) ); </code></pre>  <p>Same entire sequence would go:</p>  <pre><code>&gt;&gt;&gt; var indices = ['one','two','three','four','five','six']; &gt;&gt;&gt; var i = 2; &gt;&gt;&gt; indices = indices.concat( indices.splice( i, 1 ) ); &gt;&gt;&gt; indices [""one"", ""two"", ""four"", ""five"", ""six"", ""three""] </code></pre>  <p>This works because <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/splice"" rel=""nofollow noreferrer"">splice</a> is destructive to the array but returns removed elements, which may then be handed to <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/concat"" rel=""nofollow noreferrer"">concat</a>. </p>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	946380	"<p>OK, I think I'm going to go with a hybrid custom set of functions:</p>  <p>Encode: Use encodeURIComponent(), then put slashes back in.<br> Decode: Decode any %hex values found.</p>  <p>Here's a more complete variant of what I ended up using (it handles Unicode properly, too):</p>  <pre><code>function quoteUrl(url, safe) {     if (typeof(safe) !== 'string') {         safe = '/';    // Don't escape slashes by default     }      url = encodeURIComponent(url);      // Unescape characters that were in the safe list     toUnencode = [  ];     for (var i = safe.length - 1; i &gt;= 0; --i) {         var encoded = encodeURIComponent(safe[i]);         if (encoded !== safe.charAt(i)) {    // Ignore safe char if it wasn't escaped             toUnencode.push(encoded);         }     }      url = url.replace(new RegExp(toUnencode.join('|'), 'ig'), decodeURIComponent);      return url; }   var unquoteUrl = decodeURIComponent;    // Make alias to have symmetric function names </code></pre>  <p>Note that if you don't need ""safe"" characters when encoding (<code>'/'</code> by default in Python), then you can just use the built-in <code>encodeURIComponent()</code> and <code>decodeURIComponent()</code> functions directly.</p>  <p>Also, if there are Unicode characters (i.e. characters with codepoint >= 128) in the string, then to maintain compatibility with JavaScript's <code>encodeURIComponent()</code>, the Python <code>quote_url()</code> would have to be:</p>  <pre><code>def quote_url(url, safe):     """"""URL-encodes a string (either str (i.e. ASCII) or unicode);     uses de-facto UTF-8 encoding to handle Unicode codepoints in given string.     """"""     return urllib.quote(unicode(url).encode('utf-8'), safe) </code></pre>  <p>And <code>unquote_url()</code> would be:</p>  <pre><code>def unquote_url(url):     """"""Decodes a URL that was encoded using quote_url.     Returns a unicode instance.     """"""     return urllib.unquote(url).decode('utf-8') </code></pre>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	946656	"<p>Try a regex. Something like this:</p>  <pre><code>mystring.replace(/[\xFF-\xFFFF]/g, ""%"" + ""$&amp;"".charCodeAt(0)); </code></pre>  <p>That will replace any character above ordinal 255 with its corresponding %HEX representation.</p>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	2947168	"<p>Python: <code>urllib.quote</code></p>  <p>Javascript:<code>unescape</code></p>  <p>I haven't done extensive testing but for my purposes it works most of the time. I guess you have some specific characters that don't work. Maybe if I use some Asian text or something it will break :)</p>  <p>This came up when I googled so I put this in for all the others, if not specifically for the original question.</p>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	6618858	"<pre><code>JavaScript               |  Python -----------------------------------  encodeURI(str)           |  urllib.parse.quote(str, safe='~@#$&amp;()*!+=:;,?/\''); ----------------------------------- encodeURIComponent(str)  |  urllib.parse.quote(str, safe='~()*!\'') </code></pre> <p>On Python 3.7+ you can remove <code>~</code> from <code>safe=</code>.</p>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	35343767	"<p>The <a href=""http://docs.python-requests.org/en/master/"" rel=""nofollow noreferrer"">requests</a> library is a bit more popular if you don't mind the extra dependency</p>  <pre><code>from requests.utils import quote quote(str) </code></pre>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	71611414	"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent"" rel=""nofollow noreferrer""><code>decodeURIComponent()</code></a> is similar to <code>unquote</code></p> <pre class=""lang-js prettyprint-override""><code>const unquote = decodeURIComponent const unquote_plus = (s) =&gt; decodeURIComponent(s.replace(/\+/g, ' ')) </code></pre> <p>except that Python is much more forgiving. If one of the two characters after a <code>%</code> is not a hex digit (or there's not two characters after a <code>%</code>), JavaScript will throw a <code>URIError: URI malformed</code> error, whereas Python will just leave the <code>%</code> as is.</p> <p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> is not quite the same as <code>quote</code>, you need to percent encode a few more characters and un-escape <code>/</code>:</p> <pre class=""lang-js prettyprint-override""><code>const quoteChar = (c) =&gt; '%' + c.charCodeAt(0).toString(16).padStart(2, '0').toUpperCase() const quote = (s) =&gt; encodeURIComponent(s).replace(/[()*!']/g, quoteChar).replace(/%2F/g, '/')  const quote_plus = (s) =&gt; quote(s).replace(/%20/g, '+') </code></pre> <p>The characters that Python's <code>quote</code> doesn't escape is documented <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer"">here</a> and is listed as (on Python 3.7+) &quot;Letters, digits, and the characters <code>'_.-~'</code> are never quoted. By default, this function is intended for quoting the path section of a URL. The optional <em>safe</em> parameter specifies additional ASCII characters that should not be quoted — its default value is <code>'/'</code>&quot;</p> <p>The characters that JavaScript's <code>encodeURIComponent</code> doesn't encode is documented <a href=""https://tc39.es/ecma262/multipage/global-object.html#prod-uriUnescaped"" rel=""nofollow noreferrer"">here</a> and is listed as <em>uriAlpha</em> (upper and lowercase ASCII letters), <em>DecimalDigit</em> and <em>uriMark</em>, which are <code>-</code> <code>_</code> <code>.</code> <code>!</code> <code>~</code> <code>*</code> <code>'</code> <code>(</code> <code>)</code>.</p>"
946170	Equivalent JavaScript functions for Python's urllib.parse.quote() and urllib.parse.unquote()	javascript|python|url|encoding	2009-06-03 17:51:28.060000 UTC	"<p>Are there any equivalent JavaScript functions for Python's <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote"" rel=""nofollow noreferrer""><code>urllib.parse.quote()</code></a> and <a href=""https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote"" rel=""nofollow noreferrer""><code>urllib.parse.unquote()</code></a>?</p> <p>The closest I've come across are <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"" rel=""nofollow noreferrer""><code>encodeURI()</code></a>/<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent"" rel=""nofollow noreferrer""><code>encodeURIComponent()</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape"" rel=""nofollow noreferrer""><code>escape()</code></a> (and their corresponding un-encoding functions), but they don't encode/decode the same set of special characters as far as I can tell.</p>"	72449666	"<p>Here are implementations based on a implementation on github repo <a href=""https://github.com/purescript-python/purescript-python/blob/master/passing/python-ffi/Global.py"" rel=""nofollow noreferrer"">purescript-python</a>:</p> <pre class=""lang-py prettyprint-override""><code>import urllib.parse as urllp def encodeURI(s): return urllp.quote(s, safe=&quot;~@#$&amp;()*!+=:;,.?/'&quot;) def decodeURI(s): return urllp.unquote(s, errors=&quot;strict&quot;) def encodeURIComponent(s): return urllp.quote(s, safe=&quot;~()*!.'&quot;) def decodeURIComponent(s): return urllp.unquote(s, errors=&quot;strict&quot;) </code></pre>"
1072281	Is this a correct way to return JSON in Python/GAE for parsing in JavaScript?	python|ajax|json|api|google-app-engine	2009-07-02 03:15:11.530000 UTC	"<p>I am making an API for some AJAX related things in my web app on GAE in Python. After setting the content-type to 'application/json' and accessing my url directly-</p>  <pre><code>http://mysite.com/api?method=theMethod&amp;param=firstParam </code></pre>  <p>-I am being prompted with a 'save file' dialog box instead of seeing the JSON object displayed. The file contains the JSON object when opened in notepad.</p>  <p>Is this a correct way to return JSON from Python using GAE to be parsed in JavaScript?</p>  <pre><code>from django.utils import simplejson self.response.headers['Content-Type'] = 'application/json' jsonData = {""foo"" : ""bar""} self.response.out.write(simplejson.dumps(jsonData)) </code></pre>  <p>I have noticed that when using another API from somewhere else such as Flickr, my browser displays the JSON object rather than asking for me to save the file. This behavior is what encouraged me to investigate my implementation. My only thought is that this is related to a JSONP implementation.</p>  <p>Judging from <a href=""http://www.ietf.org/rfc/rfc4627.txt"" rel=""nofollow noreferrer"">rfc4627</a>, I should be using 'application/json'.</p>"	1072291	"<p>I think the Flickr API returns the json as type 'text/plain' which then will be displayed as text. You might try 'text/json' as a halfway point. Being easily viewed might outweigh being correct in your case.</p>  <p>Also consider that should any client require the content type to be 'application/json' and refuse to work with 'text/plain' that client should specifically request the type it wants without '<em>/</em>'. This then could be a case you look for when preparing the content type of your response, and you could document your service accordingly.</p>  <p>See Request:</p>  <pre><code>http://www.flickr.com/services/rest/?method=flickr.test.echo&amp;format=json&amp;api_key=cecc9218c59188ebc6150eff9cd908dc </code></pre>  <p>Request Headers</p>  <pre><code>Accept:application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5 Referer:http://www.flickr.com/services/api/response.json.html User-Agent:Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_7; en-us) AppleWebKit/530.18 (KHTML, like Gecko) Version/4.0.1 Safari/530.18 </code></pre>  <p>Response Headers</p>  <pre><code>Connection:close Content-Encoding:gzip Content-Length:134 Content-Type:text/plain; charset=utf-8 Date:Thu, 02 Jul 2009 03:19:34 GMT P3p:policyref=""http://p3p.yahoo.com/w3c/p3p.xml"", CP=""CAO DSP COR CUR ADM DEV TAI PSA PSD IVAi IVDi CONi TELo OTPi OUR DELi SAMi OTRi UNRi PUBi IND PHY ONL UNI PUR FIN COM NAV INT DEM CNT STA POL HEA PRE GOV"" Vary:Accept-Encoding </code></pre>  <p>Content</p>  <pre><code>jsonFlickrApi({""method"":{""_content"":""flickr.test.echo""}, ""format"":{""_content"":""json""}, ""api_key"":{""_content"":""cecc9218c59188ebc6150eff9cd908dc""}, ""stat"":""ok""}) </code></pre>"
1072281	Is this a correct way to return JSON in Python/GAE for parsing in JavaScript?	python|ajax|json|api|google-app-engine	2009-07-02 03:15:11.530000 UTC	"<p>I am making an API for some AJAX related things in my web app on GAE in Python. After setting the content-type to 'application/json' and accessing my url directly-</p>  <pre><code>http://mysite.com/api?method=theMethod&amp;param=firstParam </code></pre>  <p>-I am being prompted with a 'save file' dialog box instead of seeing the JSON object displayed. The file contains the JSON object when opened in notepad.</p>  <p>Is this a correct way to return JSON from Python using GAE to be parsed in JavaScript?</p>  <pre><code>from django.utils import simplejson self.response.headers['Content-Type'] = 'application/json' jsonData = {""foo"" : ""bar""} self.response.out.write(simplejson.dumps(jsonData)) </code></pre>  <p>I have noticed that when using another API from somewhere else such as Flickr, my browser displays the JSON object rather than asking for me to save the file. This behavior is what encouraged me to investigate my implementation. My only thought is that this is related to a JSONP implementation.</p>  <p>Judging from <a href=""http://www.ietf.org/rfc/rfc4627.txt"" rel=""nofollow noreferrer"">rfc4627</a>, I should be using 'application/json'.</p>"	1072395	"<p>This is the right way, mime type for json is application/json not text/json and NEVER text/html. <a href=""https://www.rfc-editor.org/rfc/rfc4627"" rel=""nofollow noreferrer"">https://www.rfc-editor.org/rfc/rfc4627</a> starts with &quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;</p> <p>read <a href=""http://simonwillison.net/2009/Feb/6/json/"" rel=""nofollow noreferrer"">this</a> for more details/options</p>"
1077393	Python Unix time doesn't work in Javascript	javascript|python|datetime|utc|unix-timestamp	2009-07-03 00:55:59.747000 UTC	"<p>In Python, using calendar.timegm(), I get a 10 digit result for a unix timestamp. When I put this into Javscript's setTime() function, it comes up with a date in 1970. It evidently needs a unix timestamp that is 13 digits long. How can this happen? Are they both counting from the same date? </p>  <p>How can I use the same unix timestamp between these two languages?</p>  <p>In Python:</p>  <pre><code>In [60]: parseddate.utctimetuple() Out[60]: (2009, 7, 17, 1, 21, 0, 4, 198, 0) In [61]: calendar.timegm(parseddate.utctimetuple()) Out[61]: 1247793660 </code></pre>  <p>In Firebug:</p>  <pre><code>&gt;&gt;&gt; var d = new Date(); d.setTime(1247793660); d.toUTCString() ""Thu, 15 Jan 1970 10:36:55 GMT"" </code></pre>"	1077401	<p>Are you possibly mixing up seconds-since-1970 with milliseconds-since-1970?</p>
1077393	Python Unix time doesn't work in Javascript	javascript|python|datetime|utc|unix-timestamp	2009-07-03 00:55:59.747000 UTC	"<p>In Python, using calendar.timegm(), I get a 10 digit result for a unix timestamp. When I put this into Javscript's setTime() function, it comes up with a date in 1970. It evidently needs a unix timestamp that is 13 digits long. How can this happen? Are they both counting from the same date? </p>  <p>How can I use the same unix timestamp between these two languages?</p>  <p>In Python:</p>  <pre><code>In [60]: parseddate.utctimetuple() Out[60]: (2009, 7, 17, 1, 21, 0, 4, 198, 0) In [61]: calendar.timegm(parseddate.utctimetuple()) Out[61]: 1247793660 </code></pre>  <p>In Firebug:</p>  <pre><code>&gt;&gt;&gt; var d = new Date(); d.setTime(1247793660); d.toUTCString() ""Thu, 15 Jan 1970 10:36:55 GMT"" </code></pre>"	1077402	"<p>JavaScript <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date"" rel=""nofollow noreferrer"">Date constructor</a> works with milliseconds, you should multiply the Python unix time by 1000.</p>  <pre><code>var unixTimestampSeg = 1247793660; var date = new Date(unixTimestampSeg*1000); </code></pre>"
1077393	Python Unix time doesn't work in Javascript	javascript|python|datetime|utc|unix-timestamp	2009-07-03 00:55:59.747000 UTC	"<p>In Python, using calendar.timegm(), I get a 10 digit result for a unix timestamp. When I put this into Javscript's setTime() function, it comes up with a date in 1970. It evidently needs a unix timestamp that is 13 digits long. How can this happen? Are they both counting from the same date? </p>  <p>How can I use the same unix timestamp between these two languages?</p>  <p>In Python:</p>  <pre><code>In [60]: parseddate.utctimetuple() Out[60]: (2009, 7, 17, 1, 21, 0, 4, 198, 0) In [61]: calendar.timegm(parseddate.utctimetuple()) Out[61]: 1247793660 </code></pre>  <p>In Firebug:</p>  <pre><code>&gt;&gt;&gt; var d = new Date(); d.setTime(1247793660); d.toUTCString() ""Thu, 15 Jan 1970 10:36:55 GMT"" </code></pre>"	1077403	"<p>timegm is based on Unix's <a href=""http://linux.about.com/library/cmd/blcmdl3_gmtime.htm"" rel=""noreferrer"">gmtime()</a> method, which return seconds since Jan 1, 1970.</p>  <p>Javascripts <a href=""http://www.w3schools.com/jsref/jsref_setTime.asp"" rel=""noreferrer"">setTime()</a> method is milliseconds since that date.  You'll need to multiply your seconds times 1000 to convert to the format expected by Javascript.</p>"
1077393	Python Unix time doesn't work in Javascript	javascript|python|datetime|utc|unix-timestamp	2009-07-03 00:55:59.747000 UTC	"<p>In Python, using calendar.timegm(), I get a 10 digit result for a unix timestamp. When I put this into Javscript's setTime() function, it comes up with a date in 1970. It evidently needs a unix timestamp that is 13 digits long. How can this happen? Are they both counting from the same date? </p>  <p>How can I use the same unix timestamp between these two languages?</p>  <p>In Python:</p>  <pre><code>In [60]: parseddate.utctimetuple() Out[60]: (2009, 7, 17, 1, 21, 0, 4, 198, 0) In [61]: calendar.timegm(parseddate.utctimetuple()) Out[61]: 1247793660 </code></pre>  <p>In Firebug:</p>  <pre><code>&gt;&gt;&gt; var d = new Date(); d.setTime(1247793660); d.toUTCString() ""Thu, 15 Jan 1970 10:36:55 GMT"" </code></pre>"	1077414	<p>Here are a couple of python methods I use to convert to and from javascript/datetime.</p>  <pre><code>def to_datetime(js_timestamp):     return  datetime.datetime.fromtimestamp(js_timestamp/1000)  def js_timestamp_from_datetime(dt):     return 1000 * time.mktime(dt.timetuple()) </code></pre>  <p>In javascript you would do:</p>  <pre><code>var dt = new Date(); dt.setTime(js_timestamp); </code></pre>
1080149	Would Like Open Source RSS / News Reader Code or Widget Python or Javascript	javascript|python|open-source|rss	2009-07-03 17:00:15.350000 UTC	"<p>I would like to be able to massage certain categories of news feeds to make their entries more consistent. For example, when a job seeker subscribes to two different job sites the feeds s/he gets will differ markedly. One would like to be able to perform lookups and other work in the news reader, process the incoming feed on the basis of any extra information found and then present the massaged job information to the user.</p>  <p>Have you seen any open source plug-ins, widgets or codes for news readers that invite modification?</p>  <p>Thanks for any suggestions.</p>"	1080657	"<p>You might have a look at the Planet Venus software, which has a <a href=""http://intertwingly.net/code/venus/docs/filters.html"" rel=""nofollow noreferrer"">filter system</a> that might be useful for what you want.</p>"
1080149	Would Like Open Source RSS / News Reader Code or Widget Python or Javascript	javascript|python|open-source|rss	2009-07-03 17:00:15.350000 UTC	"<p>I would like to be able to massage certain categories of news feeds to make their entries more consistent. For example, when a job seeker subscribes to two different job sites the feeds s/he gets will differ markedly. One would like to be able to perform lookups and other work in the news reader, process the incoming feed on the basis of any extra information found and then present the massaged job information to the user.</p>  <p>Have you seen any open source plug-ins, widgets or codes for news readers that invite modification?</p>  <p>Thanks for any suggestions.</p>"	1080884	"<p>I don't know if this is quite what you want, but you could look into <a href=""http://pipes.yahoo.com/pipes/"" rel=""nofollow noreferrer"">Yahoo Pipes</a>. You could also parse the feeds with <a href=""http://www.dalkescientific.com/Python/PyRSS2Gen.html"" rel=""nofollow noreferrer"">PyRSS2Gen</a>.</p>"
1080149	Would Like Open Source RSS / News Reader Code or Widget Python or Javascript	javascript|python|open-source|rss	2009-07-03 17:00:15.350000 UTC	"<p>I would like to be able to massage certain categories of news feeds to make their entries more consistent. For example, when a job seeker subscribes to two different job sites the feeds s/he gets will differ markedly. One would like to be able to perform lookups and other work in the news reader, process the incoming feed on the basis of any extra information found and then present the massaged job information to the user.</p>  <p>Have you seen any open source plug-ins, widgets or codes for news readers that invite modification?</p>  <p>Thanks for any suggestions.</p>"	1274695	"<p>I'd still be interested in any responses that people might have to my question. However, in case anyone sees the question and is also looking for something like this, let me mention the existence of <a href=""http://offog.org/code/rawdog.html"" rel=""nofollow noreferrer"">rawdog</a>.</p>  <p>A claim made at that link is that, ""rawdog is an RSS Aggregator Without Delusions Of Grandeur.""</p>"
1116362	Retrieve cookie created using javascript in python	python|cookies|urllib2|cookiejar	2009-07-12 16:25:38.023000 UTC	"<p>I've had a look at many tutorials regarding cookiejar, but my problem is that the webpage that i want to scape creates the cookie using javascript and I can't seem to retrieve the cookie. Does anybody have a solution to this problem?</p>"	1116402	"<p>Maybe you can execute the JavaScript code in a JavaScript engine with Python bindings (like <a href=""http://github.com/davisp/python-spidermonkey/tree/master"" rel=""nofollow noreferrer"">python-spidermonkey</a> or <a href=""http://code.google.com/p/pyv8/"" rel=""nofollow noreferrer"">pyv8</a>) and then retrieve the cookie. Or, as the javascript code is executed client side anyway, you may be able to convert the cookie-generating code to Python.</p>"
1116362	Retrieve cookie created using javascript in python	python|cookies|urllib2|cookiejar	2009-07-12 16:25:38.023000 UTC	"<p>I've had a look at many tutorials regarding cookiejar, but my problem is that the webpage that i want to scape creates the cookie using javascript and I can't seem to retrieve the cookie. Does anybody have a solution to this problem?</p>"	1116524	"<p>You could access the page using a real browser, via <a href=""http://pamie.sourceforge.net/"" rel=""nofollow noreferrer"">PAMIE</a>, <a href=""http://sourceforge.net/projects/pywin32/"" rel=""nofollow noreferrer"">win32com</a> or similar, then the JavaScript will be running in its native environment.</p>"
1116362	Retrieve cookie created using javascript in python	python|cookies|urllib2|cookiejar	2009-07-12 16:25:38.023000 UTC	"<p>I've had a look at many tutorials regarding cookiejar, but my problem is that the webpage that i want to scape creates the cookie using javascript and I can't seem to retrieve the cookie. Does anybody have a solution to this problem?</p>"	1116535	"<p>If all pages have the same JavaScript then maybe you could parse the HTML to find that piece of code, and from that get the value the cookie would be set to? </p>  <p>That would make your scraping quite vulnerable to changes in the third party website, but that's most often the case while scraping. (Please bear in mind that the third-party website owner may not like that you're getting the content this way.)</p>"
1116362	Retrieve cookie created using javascript in python	python|cookies|urllib2|cookiejar	2009-07-12 16:25:38.023000 UTC	"<p>I've had a look at many tutorials regarding cookiejar, but my problem is that the webpage that i want to scape creates the cookie using javascript and I can't seem to retrieve the cookie. Does anybody have a solution to this problem?</p>"	1118077	"<p>I responded to your <a href=""https://stackoverflow.com/questions/1117491/fake-a-cookie-to-scrape-a-site-in-python/1118060#1118060"">other question</a> as well: take a look at <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""nofollow noreferrer"">mechanize</a>.  It's probably the most fully featured scraping module I know: if the cookie is sent, then I'm sure you can get to it with this module.</p>"
1144400	Hacking JavaScript Array Into JSON With Python	javascript|python|json	2009-07-17 16:34:59.297000 UTC	"<p>I am fetching a .js file from a remote site that contains data I want to process as JSON using the simplejson library on my Google App Engine site.  The .js file looks like this:</p>  <pre><code>var txns = [     { apples: '100', oranges: '20', type: 'SELL'},      { apples: '200', oranges: '10', type: 'BUY'}] </code></pre>  <p>I have no control over the format of this file.  What I did at first just to hack through it was to chop the <code>""var txns = ""</code> bit off of the string and then do a series of <code>.replace(old, new, [count])</code> on the string until it looked like standard JSON:</p>  <pre><code>cleanJSON = malformedJSON.replace(""'"", '""').replace('apples:', '""apples"":').replace('oranges:', '""oranges"":').replace('type:', '""type"":').replace('{', '{""transaction"":{').replace('}', '}}') </code></pre>  <p>So that it now looks like:</p>  <pre><code>[{ ""transaction"" : { ""apples"": ""100"", ""oranges"": ""20"", ""type"": ""SELL""} },   { ""transaction"" : { ""apples"": ""200"", ""oranges"": ""10"", ""type"": ""BUY""} }] </code></pre>  <p>How would you tackle this formatting issue?  Is there a known way (library, script) to format a JavaScript array into JSON notation?</p>"	1144458	"<p>If you <strong>know</strong> that's what it's always going to look like, you could do a regex to find unquoted space-delimited text that ends with a colon and surround it with quotes.</p>  <p>I'm always worried about unexpected input with a regex like that, though. How do you know the remote source won't change what you get?</p>"
1144400	Hacking JavaScript Array Into JSON With Python	javascript|python|json	2009-07-17 16:34:59.297000 UTC	"<p>I am fetching a .js file from a remote site that contains data I want to process as JSON using the simplejson library on my Google App Engine site.  The .js file looks like this:</p>  <pre><code>var txns = [     { apples: '100', oranges: '20', type: 'SELL'},      { apples: '200', oranges: '10', type: 'BUY'}] </code></pre>  <p>I have no control over the format of this file.  What I did at first just to hack through it was to chop the <code>""var txns = ""</code> bit off of the string and then do a series of <code>.replace(old, new, [count])</code> on the string until it looked like standard JSON:</p>  <pre><code>cleanJSON = malformedJSON.replace(""'"", '""').replace('apples:', '""apples"":').replace('oranges:', '""oranges"":').replace('type:', '""type"":').replace('{', '{""transaction"":{').replace('}', '}}') </code></pre>  <p>So that it now looks like:</p>  <pre><code>[{ ""transaction"" : { ""apples"": ""100"", ""oranges"": ""20"", ""type"": ""SELL""} },   { ""transaction"" : { ""apples"": ""200"", ""oranges"": ""10"", ""type"": ""BUY""} }] </code></pre>  <p>How would you tackle this formatting issue?  Is there a known way (library, script) to format a JavaScript array into JSON notation?</p>"	1144532	"<p>I would use the yaml parser as its better at most things like this. It comes with GAE as well as it is used for the config files.  Json is a subset of yaml.</p>  <p>All you have to do is get rid of ""var txns ="" then yaml should do the rest. </p>  <pre><code>import yaml  string = """"""[{ apples: '100', oranges: '20', type: 'SELL'},               { apples: '200', oranges: '10', type: 'BUY'}]""""""  list = yaml.load(string)  print list </code></pre>  <p>This gives you.</p>  <pre><code>[{'type': 'SELL', 'apples': '100', 'oranges': '20'},  {'type': 'BUY', 'apples': '200', 'oranges': '10'}] </code></pre>  <p>Once loaded you can always dump it back as a json.</p>"
1144400	Hacking JavaScript Array Into JSON With Python	javascript|python|json	2009-07-17 16:34:59.297000 UTC	"<p>I am fetching a .js file from a remote site that contains data I want to process as JSON using the simplejson library on my Google App Engine site.  The .js file looks like this:</p>  <pre><code>var txns = [     { apples: '100', oranges: '20', type: 'SELL'},      { apples: '200', oranges: '10', type: 'BUY'}] </code></pre>  <p>I have no control over the format of this file.  What I did at first just to hack through it was to chop the <code>""var txns = ""</code> bit off of the string and then do a series of <code>.replace(old, new, [count])</code> on the string until it looked like standard JSON:</p>  <pre><code>cleanJSON = malformedJSON.replace(""'"", '""').replace('apples:', '""apples"":').replace('oranges:', '""oranges"":').replace('type:', '""type"":').replace('{', '{""transaction"":{').replace('}', '}}') </code></pre>  <p>So that it now looks like:</p>  <pre><code>[{ ""transaction"" : { ""apples"": ""100"", ""oranges"": ""20"", ""type"": ""SELL""} },   { ""transaction"" : { ""apples"": ""200"", ""oranges"": ""10"", ""type"": ""BUY""} }] </code></pre>  <p>How would you tackle this formatting issue?  Is there a known way (library, script) to format a JavaScript array into JSON notation?</p>"	1144597	"<p>It's not too difficult to write your own little parsor for that using <a href=""http://pyparsing.wikispaces.com/"" rel=""noreferrer"">PyParsing</a>.</p>  <pre><code>import json from pyparsing import *  data = """"""var txns = [    { apples: '100', oranges: '20', type: 'SELL'},     { apples: '200', oranges: '10', type: 'BUY'}]""""""   def js_grammar():     key = Word(alphas).setResultsName(""key"")     value = QuotedString(""'"").setResultsName(""value"")     pair = Group(key + Literal("":"").suppress() + value)     object_ = nestedExpr(""{"", ""}"", delimitedList(pair, "",""))     array = nestedExpr(""["", ""]"", delimitedList(object_, "",""))     return array + StringEnd()  JS_GRAMMAR = js_grammar()  def parse(js):     return JS_GRAMMAR.parseString(js[len(""var txns = ""):])[0]  def to_dict(object_):     return dict((p.key, p.value) for p in object_)  result = [     {""transaction"": to_dict(object_)}     for object_ in parse(data)] print json.dumps(result) </code></pre>  <p>This is going to print</p>  <pre><code>[{""transaction"": {""type"": ""SELL"", ""apples"": ""100"", ""oranges"": ""20""}},  {""transaction"": {""type"": ""BUY"", ""apples"": ""200"", ""oranges"": ""10""}}] </code></pre>  <p>You can also add the assignment to the grammar itself. Given there are already off-the-shelf parsers for it, you should better use those. </p>"
1144400	Hacking JavaScript Array Into JSON With Python	javascript|python|json	2009-07-17 16:34:59.297000 UTC	"<p>I am fetching a .js file from a remote site that contains data I want to process as JSON using the simplejson library on my Google App Engine site.  The .js file looks like this:</p>  <pre><code>var txns = [     { apples: '100', oranges: '20', type: 'SELL'},      { apples: '200', oranges: '10', type: 'BUY'}] </code></pre>  <p>I have no control over the format of this file.  What I did at first just to hack through it was to chop the <code>""var txns = ""</code> bit off of the string and then do a series of <code>.replace(old, new, [count])</code> on the string until it looked like standard JSON:</p>  <pre><code>cleanJSON = malformedJSON.replace(""'"", '""').replace('apples:', '""apples"":').replace('oranges:', '""oranges"":').replace('type:', '""type"":').replace('{', '{""transaction"":{').replace('}', '}}') </code></pre>  <p>So that it now looks like:</p>  <pre><code>[{ ""transaction"" : { ""apples"": ""100"", ""oranges"": ""20"", ""type"": ""SELL""} },   { ""transaction"" : { ""apples"": ""200"", ""oranges"": ""10"", ""type"": ""BUY""} }] </code></pre>  <p>How would you tackle this formatting issue?  Is there a known way (library, script) to format a JavaScript array into JSON notation?</p>"	1144621	<p>You could create an intermediate page containing a Javascript script that just loads the remote one and dumps it to JSON. Then Python can make requests to your intermediate page and get out nice JSON.</p>
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	1199481	"<p>Here's a Python script I made that I use with all my heavy JavaScript projects. I'm using YUICompressor, but you can change the code to use another compressor.</p>  <pre><code>import os, os.path, shutil  YUI_COMPRESSOR = 'yuicompressor-2.4.2.jar'  def compress(in_files, out_file, in_type='js', verbose=False,              temp_file='.temp'):     temp = open(temp_file, 'w')     for f in in_files:         fh = open(f)         data = fh.read() + '\n'         fh.close()          temp.write(data)          print ' + %s' % f     temp.close()      options = ['-o ""%s""' % out_file,                '--type %s' % in_type]      if verbose:         options.append('-v')      os.system('java -jar ""%s"" %s ""%s""' % (YUI_COMPRESSOR,                                           ' '.join(options),                                           temp_file))      org_size = os.path.getsize(temp_file)     new_size = os.path.getsize(out_file)      print '=&gt; %s' % out_file     print 'Original: %.2f kB' % (org_size / 1024.0)     print 'Compressed: %.2f kB' % (new_size / 1024.0)     print 'Reduction: %.1f%%' % (float(org_size - new_size) / org_size * 100)     print ''      #os.remove(temp_file) </code></pre>  <p>I use it like this (the below is just a code snippet, and assumes that the <code>compress</code> function exists in the current namespace):</p>  <pre><code>SCRIPTS = [     'app/js/libs/EventSource.js',     'app/js/libs/Hash.js',     'app/js/libs/JSON.js',     'app/js/libs/ServiceClient.js',     'app/js/libs/jquery.hash.js',     'app/js/libs/Application.js',     'app/js/intro.js',     'app/js/jquery-extras.js',     'app/js/settings.js',     'app/js/api.js',     'app/js/game.js',     'app/js/user.js',     'app/js/pages.intro.js',     'app/js/pages.home.js',     'app/js/pages.log-in.js',     'app/js/pages.log-out.js',     'app/js/pages.new-command.js',     'app/js/pages.new-frame.js',     'app/js/pages.not-found.js',     'app/js/pages.register.js',     'app/js/pages.outro.js',     'app/js/outro.js',     ] SCRIPTS_OUT_DEBUG = 'app/js/multifarce.js' SCRIPTS_OUT = 'app/js/multifarce.min.js'  STYLESHEETS = [     'app/media/style.css',     ] STYLESHEETS_OUT = 'app/media/style.min.css'  def main():     print 'Compressing JavaScript...'     compress(SCRIPTS, SCRIPTS_OUT, 'js', False, SCRIPTS_OUT_DEBUG)      print 'Compressing CSS...'     compress(STYLESHEETS, STYLESHEETS_OUT, 'css')  if __name__ == '__main__':     main() </code></pre>"
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	1201475	"<p>The <a href=""http://qooxdoo.org"" rel=""nofollow noreferrer"">qooxdoo</a> project comes with a Javascript compressor written in Python. Although it's tightly integrated with the framework, you should be able to utilize the compressor component. If you get the latest SDK there is a <em>tool/bin/compile.py</em> command line tool you can use to compress JS files, with various options (use the -h command line switch for help). I'm sure builtout can call this through a shell.</p>  <p>If you want to roll your own you can draw the compressor into your own Python code, by using the Python modules that come with the qooxdoo SDK (under <em>tool/pylib/</em>). It's not documented but you can look at the <em>compile.py</em> script how to achieve that.</p>"
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	1905612	"<p>Combining Blixt's solution with JS Min. Here is the code:</p>  <p>Just call the <code>compress(in_files, out_file)</code> method</p>  <pre><code>import os, os.path, shutil  # This code is original from jsmin by Douglas Crockford, it was translated to # Python by Baruch Even. The original code had the following copyright and # license. # # /* jsmin.c #    2007-05-22 # # Copyright (c) 2002 Douglas Crockford  (www.crockford.com) # # Permission is hereby granted, free of charge, to any person obtaining a copy of # this software and associated documentation files (the ""Software""), to deal in # the Software without restriction, including without limitation the rights to # use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies # of the Software, and to permit persons to whom the Software is furnished to do # so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in all # copies or substantial portions of the Software. # # The Software shall be used for Good, not Evil. # # THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE # SOFTWARE. # */  from StringIO import StringIO  def jsmin(js):     ins = StringIO(js)     outs = StringIO()     JavascriptMinify().minify(ins, outs)     str = outs.getvalue()     if len(str) &gt; 0 and str[0] == '\n':         str = str[1:]     return str  def isAlphanum(c):     """"""return true if the character is a letter, digit, underscore,            dollar sign, or non-ASCII character.     """"""     return ((c &gt;= 'a' and c &lt;= 'z') or (c &gt;= '0' and c &lt;= '9') or             (c &gt;= 'A' and c &lt;= 'Z') or c == '_' or c == '$' or c == '\\' or (c is not None and ord(c) &gt; 126));  class UnterminatedComment(Exception):     pass  class UnterminatedStringLiteral(Exception):     pass  class UnterminatedRegularExpression(Exception):     pass  class JavascriptMinify(object):      def _outA(self):         self.outstream.write(self.theA)     def _outB(self):         self.outstream.write(self.theB)      def _get(self):         """"""return the next character from stdin. Watch out for lookahead. If            the character is a control character, translate it to a space or            linefeed.         """"""         c = self.theLookahead         self.theLookahead = None         if c == None:             c = self.instream.read(1)         if c &gt;= ' ' or c == '\n':             return c         if c == '': # EOF             return '\000'         if c == '\r':             return '\n'         return ' '      def _peek(self):         self.theLookahead = self._get()         return self.theLookahead      def _next(self):         """"""get the next character, excluding comments. peek() is used to see            if an unescaped '/' is followed by a '/' or '*'.         """"""         c = self._get()         if c == '/' and self.theA != '\\':             p = self._peek()             if p == '/':                 c = self._get()                 while c &gt; '\n':                     c = self._get()                 return c             if p == '*':                 c = self._get()                 while 1:                     c = self._get()                     if c == '*':                         if self._peek() == '/':                             self._get()                             return ' '                     if c == '\000':                         raise UnterminatedComment()          return c      def _action(self, action):         """"""do something! What you do is determined by the argument:            1   Output A. Copy B to A. Get the next B.            2   Copy B to A. Get the next B. (Delete A).            3   Get the next B. (Delete B).            action treats a string as a single character. Wow!            action recognizes a regular expression if it is preceded by ( or , or =.         """"""         if action &lt;= 1:             self._outA()          if action &lt;= 2:             self.theA = self.theB             if self.theA == ""'"" or self.theA == '""':                 while 1:                     self._outA()                     self.theA = self._get()                     if self.theA == self.theB:                         break                     if self.theA &lt;= '\n':                         raise UnterminatedStringLiteral()                     if self.theA == '\\':                         self._outA()                         self.theA = self._get()           if action &lt;= 3:             self.theB = self._next()             if self.theB == '/' and (self.theA == '(' or self.theA == ',' or                                      self.theA == '=' or self.theA == ':' or                                      self.theA == '[' or self.theA == '?' or                                      self.theA == '!' or self.theA == '&amp;' or                                      self.theA == '|' or self.theA == ';' or                                      self.theA == '{' or self.theA == '}' or                                      self.theA == '\n'):                 self._outA()                 self._outB()                 while 1:                     self.theA = self._get()                     if self.theA == '/':                         break                     elif self.theA == '\\':                         self._outA()                         self.theA = self._get()                     elif self.theA &lt;= '\n':                         raise UnterminatedRegularExpression()                     self._outA()                 self.theB = self._next()       def _jsmin(self):         """"""Copy the input to the output, deleting the characters which are            insignificant to JavaScript. Comments will be removed. Tabs will be            replaced with spaces. Carriage returns will be replaced with linefeeds.            Most spaces and linefeeds will be removed.         """"""         self.theA = '\n'         self._action(3)          while self.theA != '\000':             if self.theA == ' ':                 if isAlphanum(self.theB):                     self._action(1)                 else:                     self._action(2)             elif self.theA == '\n':                 if self.theB in ['{', '[', '(', '+', '-']:                     self._action(1)                 elif self.theB == ' ':                     self._action(3)                 else:                     if isAlphanum(self.theB):                         self._action(1)                     else:                         self._action(2)             else:                 if self.theB == ' ':                     if isAlphanum(self.theA):                         self._action(1)                     else:                         self._action(3)                 elif self.theB == '\n':                     if self.theA in ['}', ']', ')', '+', '-', '""', '\'']:                         self._action(1)                     else:                         if isAlphanum(self.theA):                             self._action(1)                         else:                             self._action(3)                 else:                     self._action(1)      def minify(self, instream, outstream):         self.instream = instream         self.outstream = outstream         self.theA = '\n'         self.theB = None         self.theLookahead = None          self._jsmin()         self.instream.close()  def compress(in_files, out_file, in_type='js', verbose=False,              temp_file='.temp'):     temp = open(temp_file, 'w')     for f in in_files:         fh = open(f)         data = fh.read() + '\n'         fh.close()          temp.write(data)          print ' + %s' % f     temp.close()      out = open(out_file, 'w')      jsm = JavascriptMinify()     jsm.minify(open(temp_file,'r'), out)      out.close()      org_size = os.path.getsize(temp_file)     new_size = os.path.getsize(out_file)      print '=&gt; %s' % out_file     print 'Original: %.2f kB' % (org_size / 1024.0)     print 'Compressed: %.2f kB' % (new_size / 1024.0)     print 'Reduction: %.1f%%' % (float(org_size - new_size) / org_size * 100)     print ''      os.remove(temp_file) </code></pre>"
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	5109788	"<p>A slightly different take on the solution proposed by Rushabh. Rather than a file based compress function, this is string based and somewhat simpler:</p>  <pre><code>def jsmerge(file_names, debug=False): """"""combines several js files together, with optional minification"""""" js = """" for file_name in file_names:     js += open(file_name).read()  # if debug is enabled, we skip the minification if debug:     return js else:     return jsmin(js) </code></pre>"
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	19655315	"<p>If you're using WSGI middleware you could also use <a href=""http://www.fanstatic.org/en/1.0a3/index.html"" rel=""nofollow"">Fanstatic</a>. It's probably some more work to integrate it into your stack than ""simply"" changing something in Buildout. The things you get with Fanstatic on the other hand are pretty good. It allows you to only send exactly the scripts you need for every page. It also does concatting (bundling) and minification of ""resources"" (JavaScript and CSS).</p>"
1199470	combine javascript files at deployment in python	javascript|python|deployment|buildout|jscompress	2009-07-29 11:06:42.253000 UTC	<p>I'm trying to reduce the number of scripts included in our website and we use buildout to handle deployments. Has anybody successfully implemented a method of combining and compressing scripts with buildout?</p>	51690225	"<p>I created <a href=""https://github.com/SamuelDauzon/Minifpy"" rel=""nofollow noreferrer"">Minifpy</a> : a tool to merge and minify JS and CSS file by using Python.</p>  <p>This tool use a very easy JSON configuration file to define if files must be merge , minify or not : </p>  <pre><code>{     ""js"": {         ""minify_files"": [             {""from"": ""static/file.js"", ""to"":""static/file.min.js""},         ],         ""merge_files"": [             {""from"" : [""static/file1.js"", ""static/file2.js""], ""to"":""static/public.js"", ""to_min"": ""static/public.min.js""}         ]     },     ""css"" : {         ""minify_files"": [             {""from"": ""static/file.css"", ""to"":""static/file.min.css""},         ],         ""merge_files"": [             {""from"" : [""static/file1.css"", ""static/file2.css""], ""to"":""static/public.css"", ""to_min"": ""static/public.min.css""}         ]     } } </code></pre>  <p>Minifpy detect any modifications on JS/CSS files and merge/minify them automatically (useful for development).</p>"
1270274	mechanize (python) click on a javascript type link	javascript|python|mechanize	2009-08-13 06:01:00.193000 UTC	"<p>is it possible to have mechanize follow an anchor link that is of type javascript?</p>  <p>I am trying to login into a website in python using mechanize and beautifulsoup.</p>  <p>this is the anchor link</p>  <pre><code>&lt;a id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_LoginButton"" href=""javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&amp;quot;StaticModuleID15$ctl00$SkinLogin1$Login1$Login1$LoginButton&amp;quot;, &amp;quot;&amp;quot;, true, &amp;quot;Login1&amp;quot;, &amp;quot;&amp;quot;, false, true))""&gt;&lt;img id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_Image2"" border=""0"" src=""../../App_Themes/default/images/Member/btn_loginenter.gif"" align=""absmiddle"" style=""border-width:0px;"" /&gt;&lt;/a&gt; </code></pre>  <p>and here is what i have tried</p>  <pre><code>    links = SoupStrainer('a', id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_LoginButton"")     [anchor for anchor in BeautifulSoup(data, parseOnlyThese=links)]     link = mechanize.Link( base_url = self.url,                     url = str(anchor['href']),                     text = str(anchor.string),                     tag = str(anchor.name),                     attrs = [(str(name), str(value))                              for name, value in anchor.attrs])     response2 = br.follow_link(link) </code></pre>  <p>Right now I am getting the error message of, </p>  <p>urllib2.URLError: </p>  <p>any help or suggestion is appreciated </p>  <p><strong>Edit</strong></p>  <p>After the comment by helpers, I went and looked at the code of the asp page a bit.</p>  <p>I found a little bit of useful scripts but I am unsure of what I have to do in python to emulate the JS code with python. In no where did I see any cookies set, am I looking at the wrong places?</p>  <pre><code>&lt;form name=""form1"" method=""post"" action=""BrowseSchedule.aspx?ItemId=75"" onsubmit=""javascript:return WebForm_OnSubmit();"" id=""form1""&gt;  //&lt;![CDATA[ function WebForm_OnSubmit() { if (typeof(ValidatorOnSubmit) == ""function"" &amp;&amp; ValidatorOnSubmit() == false) return false; return true; } //]]&gt;  &lt;script type=""text/javascript""&gt; //&lt;![CDATA[ var theForm = document.forms['form1']; if (!theForm) {     theForm = document.form1; } function __doPostBack(eventTarget, eventArgument) {     if (!theForm.onsubmit || (theForm.onsubmit() != false)) {         theForm.__EVENTTARGET.value = eventTarget;         theForm.__EVENTARGUMENT.value = eventArgument;         theForm.submit();     } } //]]&gt; &lt;/script&gt; function WebForm_DoPostBackWithOptions(options) {     var validationResult = true;     if (options.validation) {         if (typeof(Page_ClientValidate) == 'function') {             validationResult = Page_ClientValidate(options.validationGroup);         }     }     if (validationResult) {         if ((typeof(options.actionUrl) != ""undefined"") &amp;&amp; (options.actionUrl != null) &amp;&amp; (options.actionUrl.length &gt; 0)) {             theForm.action = options.actionUrl;         }         if (options.trackFocus) {             var lastFocus = theForm.elements[""__LASTFOCUS""];             if ((typeof(lastFocus) != ""undefined"") &amp;&amp; (lastFocus != null)) {                 if (typeof(document.activeElement) == ""undefined"") {                     lastFocus.value = options.eventTarget;                 }                 else {                     var active = document.activeElement;                     if ((typeof(active) != ""undefined"") &amp;&amp; (active != null)) {                         if ((typeof(active.id) != ""undefined"") &amp;&amp; (active.id != null) &amp;&amp; (active.id.length &gt; 0)) {                             lastFocus.value = active.id;                         }                         else if (typeof(active.name) != ""undefined"") {                             lastFocus.value = active.name;                         }                     }                 }             }         }     }     if (options.clientSubmit) {         __doPostBack(options.eventTarget, options.eventArgument);     } } </code></pre>"	1270296	"<p>I don't think this is possible with the mechanize module: it doesn't have the ability to interact with JavaScript: its purely Python and HTTP based.</p>  <p>That said, you may be intested in <a href=""http://github.com/davisp/python-spidermonkey/tree/master"" rel=""nofollow noreferrer"">python-spidermonkey</a> module, which it seems is aimed at letting you do just this kind of thing.  According to it's website it's aim is to let you</p>  <blockquote>   <p>""Execute arbitrary JavaScript code from Python. Allows you to reference arbitrary Python objects and functions in the JavaScript VM""</p> </blockquote>  <p>I've not used it yet but it certainly looks like it would do what you are looking for, although it is still in alpha.</p>"
1270274	mechanize (python) click on a javascript type link	javascript|python|mechanize	2009-08-13 06:01:00.193000 UTC	"<p>is it possible to have mechanize follow an anchor link that is of type javascript?</p>  <p>I am trying to login into a website in python using mechanize and beautifulsoup.</p>  <p>this is the anchor link</p>  <pre><code>&lt;a id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_LoginButton"" href=""javascript:WebForm_DoPostBackWithOptions(new WebForm_PostBackOptions(&amp;quot;StaticModuleID15$ctl00$SkinLogin1$Login1$Login1$LoginButton&amp;quot;, &amp;quot;&amp;quot;, true, &amp;quot;Login1&amp;quot;, &amp;quot;&amp;quot;, false, true))""&gt;&lt;img id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_Image2"" border=""0"" src=""../../App_Themes/default/images/Member/btn_loginenter.gif"" align=""absmiddle"" style=""border-width:0px;"" /&gt;&lt;/a&gt; </code></pre>  <p>and here is what i have tried</p>  <pre><code>    links = SoupStrainer('a', id=""StaticModuleID15_ctl00_SkinLogin1_Login1_Login1_LoginButton"")     [anchor for anchor in BeautifulSoup(data, parseOnlyThese=links)]     link = mechanize.Link( base_url = self.url,                     url = str(anchor['href']),                     text = str(anchor.string),                     tag = str(anchor.name),                     attrs = [(str(name), str(value))                              for name, value in anchor.attrs])     response2 = br.follow_link(link) </code></pre>  <p>Right now I am getting the error message of, </p>  <p>urllib2.URLError: </p>  <p>any help or suggestion is appreciated </p>  <p><strong>Edit</strong></p>  <p>After the comment by helpers, I went and looked at the code of the asp page a bit.</p>  <p>I found a little bit of useful scripts but I am unsure of what I have to do in python to emulate the JS code with python. In no where did I see any cookies set, am I looking at the wrong places?</p>  <pre><code>&lt;form name=""form1"" method=""post"" action=""BrowseSchedule.aspx?ItemId=75"" onsubmit=""javascript:return WebForm_OnSubmit();"" id=""form1""&gt;  //&lt;![CDATA[ function WebForm_OnSubmit() { if (typeof(ValidatorOnSubmit) == ""function"" &amp;&amp; ValidatorOnSubmit() == false) return false; return true; } //]]&gt;  &lt;script type=""text/javascript""&gt; //&lt;![CDATA[ var theForm = document.forms['form1']; if (!theForm) {     theForm = document.form1; } function __doPostBack(eventTarget, eventArgument) {     if (!theForm.onsubmit || (theForm.onsubmit() != false)) {         theForm.__EVENTTARGET.value = eventTarget;         theForm.__EVENTARGUMENT.value = eventArgument;         theForm.submit();     } } //]]&gt; &lt;/script&gt; function WebForm_DoPostBackWithOptions(options) {     var validationResult = true;     if (options.validation) {         if (typeof(Page_ClientValidate) == 'function') {             validationResult = Page_ClientValidate(options.validationGroup);         }     }     if (validationResult) {         if ((typeof(options.actionUrl) != ""undefined"") &amp;&amp; (options.actionUrl != null) &amp;&amp; (options.actionUrl.length &gt; 0)) {             theForm.action = options.actionUrl;         }         if (options.trackFocus) {             var lastFocus = theForm.elements[""__LASTFOCUS""];             if ((typeof(lastFocus) != ""undefined"") &amp;&amp; (lastFocus != null)) {                 if (typeof(document.activeElement) == ""undefined"") {                     lastFocus.value = options.eventTarget;                 }                 else {                     var active = document.activeElement;                     if ((typeof(active) != ""undefined"") &amp;&amp; (active != null)) {                         if ((typeof(active.id) != ""undefined"") &amp;&amp; (active.id != null) &amp;&amp; (active.id.length &gt; 0)) {                             lastFocus.value = active.id;                         }                         else if (typeof(active.name) != ""undefined"") {                             lastFocus.value = active.name;                         }                     }                 }             }         }     }     if (options.clientSubmit) {         __doPostBack(options.eventTarget, options.eventArgument);     } } </code></pre>"	15416360	"<p>You may set cookies using cookielib</p>  <pre><code>import mechanize import cookielib # add headers to your browser also browser = mechanize.Browser() browser.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1')] cj = cookielib.LWPCookieJar() browser.set_cookiejar(cj) </code></pre>  <p>I doubt this is even relevant now, but oh well :)</p>"
1355244	Python code to download a webpage using JavaScript	javascript|python	2009-08-30 23:52:45.247000 UTC	"<p>Im trying to download share data from a stock exchange using python. The problem is that there is no direct download link, but rather a javascript to export the data.</p>  <p>The data page url:  </p>  <pre><code>http://tase.co.il/TASE/Templates/Company/CompanyHistory.aspx?NRMODE=Published&amp;NRORIGINALURL=%2fTASEEng%2fGeneral%2fCompany%2fcompanyHistoryData.htm%3fcompanyID%3d001216%26ShareID%3d01091248%26subDataType%3d0%26&amp;NRNODEGUID={045D6005-5C86-4A8E-ADD4-C151A77EC14B}&amp;NRCACHEHINT=Guest&amp;shareID=01820083&amp;companyID=000182&amp;subDataType=0 </code></pre>  <p>When I open the data page in a browser and then the download page, it works like a charm. When I just open the download page, it doen't download anything. I guess this is because the data page injects the actual data to the variables Columns, Titles etc.</p>  <p>I've tried to mimic this behaviour in a python script, but without success.</p>  <pre><code>def download_CSV (shareID, compID):  data_url =""http://tase.co.il/TASE/Templates/Company/CompanyHistory.aspx?NRMODE=Published&amp;NRORIGINALURL=%2fTASEEng%2fGeneral%2fCompany%2fcompanyHistoryData.htm%3fsubDataType%3d0%26shareID%3d00759019&amp;NRNODEGUID={045D6005-5C86-4A8E-ADD4-C151A77EC14B}&amp;NRCACHEHINT=Guest&amp;shareID=""+shareID+""&amp;companyID=""+compID+""&amp;subDataType=0""    import urllib2  response = urllib2.urlopen(data_url)  html = response.read()   down_url =""http://tase.co.il/TASE/Pages/Export.aspx?tbl=0&amp;Columns=AddColColumnsHistory&amp;Titles=AddColTitlesHistory&amp;sn=dsHistory&amp;enumTblType=GridHistorydaily&amp;ExportType=3""    import urllib  urllib.urlretrieve (down_url, ""test.csv"") </code></pre>  <p>Thanks a lot</p>"	1355294	"<p>You could use <a href=""http://seleniumhq.org/"" rel=""nofollow noreferrer"">Selenium</a> or other ways to automate a browser to take advantage of the browser's built-in Javascript interpreter -- to control Selenium with Python, see e.g. <a href=""http://jimmyg.org/blog/2009/getting-started-with-selenium-and-python.html"" rel=""nofollow noreferrer"">here</a>.</p>"
1439224	How can I use Mylyn to aid in JavaScript and Python development? How about HTML/CSS/JSP pages?	java|eclipse|mylyn	2009-09-17 14:23:43.673000 UTC	"<p>I installed and got acquainted with Mylyn today. I also watched the excellent Mylyn/Tasktop <a href=""http://tasktop.com/videos/mylyn/webcast-mylyn-3.0.html"" rel=""nofollow noreferrer"">webcast</a>. </p>  <p>It's obvious how you can add individual packages, classes, interfaces, methods, etc. to a task's context in Java... but what about when using JavaScript or Python? How about HTML/CSS/JSP pages? Could Mylyn somehow add only certain JavaScript functions or objects to the current context? (other than the option to add the files themselves to the current context). The webcast mentioned the DLTK plugin works with Mylyn and supports dynamic languages briefly but not much more that that.</p>"	1440104	"<p>On <a href=""http://wiki.eclipse.org/Mylyn/Extensions"" rel=""nofollow noreferrer"">EclipsePedia</a>, you'll find a list of Mylyn extensions and bridges. The <a href=""http://www.eclipse.org/dltk/"" rel=""nofollow noreferrer"">DLTK</a> is the only one listed there for Javascript. Install instructions can be found from within the <a href=""http://www.eclipse.org/dltk/install.php"" rel=""nofollow noreferrer"">DLTK site</a>.</p>  <p>From the DLTK site:</p>  <blockquote>   <p>Besides a set of frameworks DLTK provides exemplary Tcl, Ruby, Javascript and Python development environments ready to use out of the box.</p> </blockquote>  <p>You can find out some more information from the <a href=""http://wiki.eclipse.org/DLTK"" rel=""nofollow noreferrer"">wiki</a>.</p>  <p>For Python, you can also use <a href=""http://pydev.org/"" rel=""nofollow noreferrer"">Pydev</a>. I've had some experience of this plugin and found it pretty handy.</p>"
1441005	Python's __getattr__ in Javascript	javascript	2009-09-17 19:57:39.427000 UTC	"<p>Is there a way to simulate Python's <code>__getattr__</code> method in Javascript?</p>  <p>I want to intercept 'gets' and 'sets' of Javascript object's properties.</p>  <p>In Python I can write the following:</p>  <pre><code>class A:     def __getattr__(self, key):         return key  a = A() print( a.b )  # Output: b </code></pre>  <p>What about Javascript?</p>"	1441146	"<p>No. The closest is <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/defineGetter"" rel=""noreferrer""><code>__defineGetter__</code></a> available in Firefox, which defines a function callback to invoke whenever the specified property is read:</p>  <pre><code>navigator.__defineGetter__('userAgent', function(){     return 'foo' // customized user agent });  navigator.userAgent; // 'foo' </code></pre>  <p>It differs from <code>__getattr__</code> in that it is called for a known property, rather than as a generic lookup for an unknown property.</p>"
1441005	Python's __getattr__ in Javascript	javascript	2009-09-17 19:57:39.427000 UTC	"<p>Is there a way to simulate Python's <code>__getattr__</code> method in Javascript?</p>  <p>I want to intercept 'gets' and 'sets' of Javascript object's properties.</p>  <p>In Python I can write the following:</p>  <pre><code>class A:     def __getattr__(self, key):         return key  a = A() print( a.b )  # Output: b </code></pre>  <p>What about Javascript?</p>"	1441238	"<p><strong>Not in standard ECMAScript-262 3rd ed.</strong> </p>  <p>Upcoming 5th edition (currently draft), on the other hand, introduces accessors in object initializers. For example:</p>  <pre><code>var o = {   a:7,   get b() { return this.a + 1; },   set c(x) { this.a = x / 2; } }; </code></pre>  <p>Similar syntax is already <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Creating_New_Objects/Defining_Getters_and_Setters"" rel=""nofollow noreferrer"">supported by Javascript 1.8.1</a> (as a non-standard extension of course).</p>  <p>Note that there are no ""completed"" ES5 implementations at the moment (although <a href=""https://stackoverflow.com/questions/1423889/which-javascript-environments-support-ecmascript-5-strict-mode-aka-use-stric/1423951"">some are in progress</a>)</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	1446060	<p>It is suboptimal. Have you considered passing your data as JSON using django's built in serializer for that?</p>
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	1446136	"<p>You can include <code>&lt;script&gt;</code> tags inside your .html templates, and then build your data structures however is convenient for you.  The template language isn't only for HTML, it can also do Javascript object literals.</p>  <p>And Paul is right: it might be best to use a json module to create a JSON string, then insert that string into the template.  That will handle the quoting issues best, and deal with deep structures with ease.</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	1446170	"<p>n.b. see 2018 update at the bottom</p>  <p>I recommend against putting much JavaScript in your Django templates - it tends to be hard to write and debug, particularly as your project expands. Instead, try writing all of your JavaScript in a separate script file which your template loads and simply including just a JSON data object in the template. This allows you to do things like run your entire JavaScript app through something like <a href=""http://www.jslint.com"" rel=""noreferrer"">JSLint</a>, minify it, etc. and you can test it with a static HTML file without any dependencies on your Django app. Using a library like simplejson also saves you the time spent writing tedious serialization code.</p>  <p>If you aren't assuming that you're building an AJAX app this might simply be done like this:</p>  <p>In the view:</p>  <pre><code>from django.utils import simplejson   def view(request, …):     js_data = simplejson.dumps(my_dict)     …     render_template_to_response(""my_template.html"", {""my_data"": js_data, …}) </code></pre>  <p>In the template:</p>  <pre><code>&lt;script type=""text/javascript""&gt;     data_from_django = {{ my_data }};     widget.init(data_from_django); &lt;/script&gt; </code></pre>  <p>Note that the type of data matters: if <code>my_data</code> is a simple number or a string from a controlled source which doesn't contain HTML, such as a formatted date, no special handling is required. If it's possible to have untrusted data provided by a user you will need to sanitize it using something like the <a href=""https://docs.djangoproject.com/en/dev/ref/templates/builtins/#escape"" rel=""noreferrer"">escape</a> or <a href=""https://docs.djangoproject.com/en/dev/ref/templates/builtins/#escapejs"" rel=""noreferrer"">escapejs</a> filters and ensure that your JavaScript handles the data safely to avoid <a href=""http://en.wikipedia.org/wiki/Cross-site_scripting"" rel=""noreferrer"">cross-site scripting</a> attacks. </p>  <p>As far as dates go, you might also want to think about how you pass dates around. I've almost always found it easiest to pass them as Unix timestamps:</p>  <p>In Django:</p>  <pre><code>time_t = time.mktime(my_date.timetuple()) </code></pre>  <p>In JavaScript, assuming you've done something like <code>time_t = {{ time_t }}</code> with the results of the snippet above:</p>  <pre><code>my_date = new Date(); my_date.setTime(time_t*1000); </code></pre>  <p>Finally, pay attention to UTC - you'll want to have the Python and Django date functions exchange data in UTC to avoid embarrassing shifts from the user's local time.</p>  <p>EDIT : Note that the setTime in javascript is in millisecond whereas the output of time.mktime is seconds. That's why we need to multiply by 1000</p>  <p>2018 Update: I still like JSON for complex values but in the intervening decade <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset"" rel=""noreferrer"">the HTML5 data API</a> has attained <a href=""https://caniuse.com/#feat=dataset"" rel=""noreferrer"">near universal browser support</a> and it's very convenient for passing simple (non-list/dict) values around, especially if you might want to have CSS rules apply based on those values and you don't care about unsupported versions of Internet Explorer.</p>  <pre><code>&lt;div id=""my-widget"" data-view-mode=""tabular""&gt;…&lt;/div&gt;  let myWidget = document.getElementById(""my-widget""); console.log(myWidget.dataset.viewMode); // Prints tabular somethingElse.addEventListener('click', evt =&gt; {     myWidget.dataset.viewMode = ""list""; }); </code></pre>  <p>This is a neat way to expose data to CSS if you want to set the initial view state in your Django template and have it automatically update when JavaScript updates the <code>data-</code> attribute. I use this for things like hiding a progress widget until the user selects something to process or to conditionally show/hide errors based on fetch outcomes or even something like displaying an active record count using CSS like <code>#some-element::after { content: attr(data-active-transfers); }</code>.</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	1446959	"<p>See the related response to <a href=""https://stackoverflow.com/questions/683462/best-way-to-integrate-python-and-javascript/683928#683928"">this question</a>. One option is to use <a href=""http://jsonpickle.googlecode.com/svn/docs/index.html"" rel=""nofollow noreferrer"">jsonpickle</a> to serialize between Python objects and JSON/Javascript objects.  It wraps simplejson and handles things that are typically not accepted by simplejson.</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	1448178	"<p>Putting Java Script embedded into Django template is <strong>rather</strong> always bad idea. </p>  <p><strong>Rather</strong>, because there are some exceptions from this rule.</p>  <p>Everything depends on the your Java Script code site and functionality.</p>  <p>It is better to have seperately static files, like JS, but the problem is that every seperate file needs another connect/GET/request/response mechanism. Sometimes for small one, two liners code os JS to put this into template, bun then use django templatetags mechanism - you can use is in other templates ;)</p>  <p>About objects - the same. If your site has AJAX construction/web2.0 like favour - you can achieve very good effect putting some count/math operation onto client side. If objects are small - embedded into template, if large - response them in another connection to avoid hangind page for user.</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	13297018	"<p>For anyone who might be having a problems with this, be sure you are rendering your json object under safe mode in the template. You can manually set this like this</p>  <pre><code>&lt;script type=""text/javascript""&gt;     data_from_django = {{ my_data|safe }};     widget.init(data_from_django); &lt;/script&gt; </code></pre>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	52060886	"<p>As of mid-2018 the simplest approach is to use Python's JSON module, simplejson is now deprecated. Beware, that as @wilblack mentions you need to prevent Django's autoescaping either using <code>safe</code> filter or <code>autoescape</code> tag with an <code>off</code> option. In both cases in the view you add the contents of the dictionary to the context</p> <p><strong>viewset.py</strong></p> <pre><code>import json  def get_context_data(self, **kwargs):     context['my_dictionary'] = json.dumps(self.object.mydict) </code></pre> <p>and then in the template you add as @wilblack suggested:</p> <p><strong>template.html</strong></p> <pre><code>&lt;script&gt;     my_data = {{ my_dictionary|safe }}; &lt;/script&gt; </code></pre> <p><strong>Security warning</strong>: <code>json.dumps</code> does not escape forward slashes: an attack is <code>{'&lt;/script&gt;&lt;script&gt;alert(123);&lt;/script&gt;': ''}</code>. Same issue as in other answers. Added another answer hopefully fixing it.</p>"
1445989	Passing Python Data to JavaScript via Django	javascript|python|django	2009-09-18 17:52:53.017000 UTC	"<p>I'm using Django and Apache to serve webpages.  My JavaScript code currently includes a data object with values to be displayed in various HTML widgets based on the user's selection from a menu of choices.  I want to derive these data from a Python dictionary.  I think I know how to embed the JavaScript code in the HTML, but how do I embed the data object in that script (on the fly) so the script's functions can use it?</p>  <p>Put another way, I want to create a JavaScript object or array from a Python dictionary, then insert that object into the JavaScript code, and then insert that JavaScript code into the HTML.</p>  <p>I suppose this structure (e.g., data embedded in variables in the JavaScript code) is suboptimal, but as a newbie I don't know the alternatives.  I've seen write-ups of Django serialization functions, but these don't help me until I can get the data into my JavaScript code in the first place.</p>  <p>I'm not (yet) using a JavaScript library like jQuery.</p>"	69869606	"<p>Fixing the security hole in the answers by @willblack and @Daniel_Kislyuk.</p> <p>If the data is untrusted, you <em>cannot</em> just do</p> <p><strong>viewset.py</strong></p> <pre><code> def get_context_data(self, **kwargs):     context['my_dictionary'] = json.dumps(self.object.mydict) </code></pre> <p><strong>template.html</strong></p> <pre><code>&lt;script&gt;     my_data = {{ my_dictionary|safe }}; &lt;/script&gt; </code></pre> <p>because the data could be something like <code>{&quot;&lt;/script&gt;&lt;script&gt;alert(123);&lt;/script&gt;&quot;:&quot;&quot;}</code> and forward slashes aren't escaped by default. Clearly the escaping by <code>json.dumps</code> may not 100% match the escaping in Javascript, which is where the problems come from.</p> <p><strong>Fixed solution</strong></p> <p>As far as I can tell, the following fixes the problem:</p> <pre><code>&lt;script&gt;    my_data = JSON.parse(&quot;{{ my_dictionary|escapejs }}&quot;); &lt;/script&gt; </code></pre> <p>If there are still issues, please post in the comments.</p>"
1460559	Getting Django Python data from views.py to javascript object in template.html	javascript|django	2009-09-22 14:51:56.417000 UTC	"<p>I'm using Django's <code>render_to_response</code> to write data out to an html page, but I'd also like that render_ to _response call to load a python dictionary into a javascript associative array.  What's the best way to do this?</p>"	1460600	"<p>What does that mean exactly? If you mean you think data in the template is in JavaScript terms, it isn't: You can use python objects in the template directly. If you mean, how do I embed a JSON literal from a Python dictionary or list into my template: Encode it with simplejson, which is included with Django.</p>  <p>But, you often don't want to do this for a couple reasons. If you include this dynamic data in the template, you can't cache it as easily. Shouldn't this be another view that is generating a JS file you're including? Or maybe an AJAX call to grab the data once the page is live? Take the pick for what best fits you situation.</p>"
1460559	Getting Django Python data from views.py to javascript object in template.html	javascript|django	2009-09-22 14:51:56.417000 UTC	"<p>I'm using Django's <code>render_to_response</code> to write data out to an html page, but I'd also like that render_ to _response call to load a python dictionary into a javascript associative array.  What's the best way to do this?</p>"	1460603	"<p>Convert it to JSON and include, in your template.html, inside a <code>&lt;script&gt;</code> tag, something like</p>  <pre><code>var my_associative_array = {{ json_data }} </code></pre>  <p>after having JSON-encoded your Python dict into a string and put it in the context using key <code>json_data</code>.</p>"
1460559	Getting Django Python data from views.py to javascript object in template.html	javascript|django	2009-09-22 14:51:56.417000 UTC	"<p>I'm using Django's <code>render_to_response</code> to write data out to an html page, but I'd also like that render_ to _response call to load a python dictionary into a javascript associative array.  What's the best way to do this?</p>"	1461934	"<p>Vinay Sajip is close however you add to add the safe filter to avoid django from auto escaping the json data, so this would work (there are other ways to stop the auto escaping but this is the easiest one):</p>  <pre><code> var my_associative_array = {{ json_data|safe }} </code></pre>"
1468478	Making DiveIntoPython3 work in IE8 (fixing a Javascript performance issue)	javascript|jquery|performance|internet-explorer|internet-explorer-8	2009-09-23 20:56:10.877000 UTC	"<p>I am trying to fix the performance problem with Dive Into Python 3 on IE8. Visit <a href=""http://diveintopython3.org/native-datatypes.html"" rel=""nofollow noreferrer"">this page</a> in IE8 and, after a few moments, you will see the following popup:</p>  <p><a href=""http://dl.getdropbox.com/u/87045/permalinks/dip3-ie8-perf.png"" rel=""nofollow noreferrer"">alt text http://dl.getdropbox.com/u/87045/permalinks/dip3-ie8-perf.png</a></p>  <p>I traced down the culprit down to this line in <code>j/dip3.js</code></p>  <p>... find(""tr:nth-child("" + (i+1) + "") td:nth-child(2)"");</p>  <p>If I disable it (and return from the function immediately), the ""Stop executing this script?"" dialog does not appear as the page now loads fairly fast.</p>  <p>I am no Javascript/jquery expert, so I ask you fellow developers as to why this query is making IE slow. Is there a fix for it?</p>  <p><strong>Edit</strong>: you can download the <a href=""http://www.diveintopython3.org/d/diveintopython3-html-latest.zip"" rel=""nofollow noreferrer"">entire webpage</a> (980K) for local viewing/editing.</p>"	2829908	"<p>This seems to need a bit of rewriting. </p>  <p>nth-child is a slow operation. You should implement the current functionality by generating classes or ids that would be common for the TDs in table and elements from the refs collection (dip3.js line 183). and then:</p>  <pre><code>refs.each(function(i) {   var a = $(this);   var li = a.parents(""pre"").next(""table"").find(""td.""+a.attr('class'));   li.add(a).hover(function() { a.css(hip); li.css(hip); },   function() { a.css(unhip); li.css(unhip); }); }); </code></pre>"
1468478	Making DiveIntoPython3 work in IE8 (fixing a Javascript performance issue)	javascript|jquery|performance|internet-explorer|internet-explorer-8	2009-09-23 20:56:10.877000 UTC	"<p>I am trying to fix the performance problem with Dive Into Python 3 on IE8. Visit <a href=""http://diveintopython3.org/native-datatypes.html"" rel=""nofollow noreferrer"">this page</a> in IE8 and, after a few moments, you will see the following popup:</p>  <p><a href=""http://dl.getdropbox.com/u/87045/permalinks/dip3-ie8-perf.png"" rel=""nofollow noreferrer"">alt text http://dl.getdropbox.com/u/87045/permalinks/dip3-ie8-perf.png</a></p>  <p>I traced down the culprit down to this line in <code>j/dip3.js</code></p>  <p>... find(""tr:nth-child("" + (i+1) + "") td:nth-child(2)"");</p>  <p>If I disable it (and return from the function immediately), the ""Stop executing this script?"" dialog does not appear as the page now loads fairly fast.</p>  <p>I am no Javascript/jquery expert, so I ask you fellow developers as to why this query is making IE slow. Is there a fix for it?</p>  <p><strong>Edit</strong>: you can download the <a href=""http://www.diveintopython3.org/d/diveintopython3-html-latest.zip"" rel=""nofollow noreferrer"">entire webpage</a> (980K) for local viewing/editing.</p>"	2869250	"<p>This popup message is misleading - it doesn't actually mean that IE is running slowly, but that the number of executed script statements has exceeded a certain threshold.  Even if the script executes very quickly, you'll still see this message if you go over the limit.  The only way to get rid of it is to reduce the number of statements executed or edit the registry.</p>  <p><a href=""http://support.microsoft.com/kb/175500"" rel=""nofollow noreferrer"">http://support.microsoft.com/kb/175500</a></p>  <p>I find Microsoft's implementation of this very annoying.  It makes assumptions about the speed of your computer.</p>"
1529496	Is there a javascript equivalent of python's __getattr__ method?	javascript	2009-10-07 04:36:03.570000 UTC	"<p>In python you can define a object having <code>__getattr__(self,key)</code> method to handle all unknown attributes to be solvable in programmatic manner, but in javascript you can only define getters and setters for pre-defined attributes. Is there a generic way of getting the former thing done also in javascript?</p>  <p>Sample code would be smth like:</p>  <pre><code>function X() {}; X.prototype={   __getattr__:function(attrname) {     return ""Value for attribute '""+attrname+""'"";   } }  x=new X() alert(x.lskdjoau); // produces message: ""Value of attribute 'lskdjoau'"" </code></pre>  <p>Key point is getting value of attribute programmatically depending on the name of the attribute. Pre-setting attribute does not help because during init there is no information what attributes might be requested.</p>"	1529540	"<p>Sadly the answer is No. See <a href=""https://stackoverflow.com/questions/1441005/pythons-getattr-in-javascript"">Python&#39;s __getattr__ in Javascript</a></p>  <p>You've got <a href=""https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/defineGetter"" rel=""nofollow noreferrer""><code>__defineGetter__</code></a>, but as you noted you need to know the name of the attribute you will be accessing.</p>  <p>By the way I think you meant <code>__getattr__</code> (<code>__getitem__</code> is for things you want to access with <code>[]</code>).</p>"
1529496	Is there a javascript equivalent of python's __getattr__ method?	javascript	2009-10-07 04:36:03.570000 UTC	"<p>In python you can define a object having <code>__getattr__(self,key)</code> method to handle all unknown attributes to be solvable in programmatic manner, but in javascript you can only define getters and setters for pre-defined attributes. Is there a generic way of getting the former thing done also in javascript?</p>  <p>Sample code would be smth like:</p>  <pre><code>function X() {}; X.prototype={   __getattr__:function(attrname) {     return ""Value for attribute '""+attrname+""'"";   } }  x=new X() alert(x.lskdjoau); // produces message: ""Value of attribute 'lskdjoau'"" </code></pre>  <p>Key point is getting value of attribute programmatically depending on the name of the attribute. Pre-setting attribute does not help because during init there is no information what attributes might be requested.</p>"	30224842	"<p>It's now possible if your browser has support for the ES6 Proxy feature. You can check this in the <a href=""https://kangax.github.io/compat-table/es6/#Proxy"" rel=""noreferrer"">ECMAScript 6 compatibility table</a>.</p>  <p>If you have the proxy support, you would use it as follows:</p>  <p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false""> <div class=""snippet-code""> <pre class=""snippet-code-js lang-js prettyprint-override""><code>let handler = {   get(target, name) {     return `Value for attribute ${name}`   } }  let x = new Proxy({}, handler); console.log(x.lskdjoau); // produces message: ""Value of attribute 'lskdjoau'""</code></pre> </div> </div> </p>  <p>Works in chrome, firefox, and node.js. Downsides: doesn't work in IE - freakin IE. Soon.</p>"
1543820	Comprehensions in Python and Javascript are only very basic?	javascript|python|haskell|list-comprehension	2009-10-09 13:39:13.753000 UTC	"<p>Looking at comprehensions in Python and Javascript, so far I can't see some of the main features that I consider most powerful in comprehensions in languages like Haskell.  </p>  <p>Do they allow things like multiple generators?  Or are they just a basic map-filter form?</p>  <p>If they don't allow multiple generators, I find them quite disappointing - why have such things been left out?</p>"	1543844	"<p>Yes, you can have multiple iterables in a <a href=""http://docs.python.org/tutorial/datastructures.html#list-comprehensions"" rel=""nofollow noreferrer"">Python list comprehension</a>:</p>  <pre><code>&gt;&gt;&gt; [(x,y) for x in range(2) for y in range(3)] [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)] </code></pre>"
1543820	Comprehensions in Python and Javascript are only very basic?	javascript|python|haskell|list-comprehension	2009-10-09 13:39:13.753000 UTC	"<p>Looking at comprehensions in Python and Javascript, so far I can't see some of the main features that I consider most powerful in comprehensions in languages like Haskell.  </p>  <p>Do they allow things like multiple generators?  Or are they just a basic map-filter form?</p>  <p>If they don't allow multiple generators, I find them quite disappointing - why have such things been left out?</p>"	1543870	"<p>Python allows multiple generators:</p>  <pre><code>&gt;&gt;&gt; [(x,y,x*y) for x in range(1,5) for y in range(1,5)] [(1, 1, 1), (1, 2, 2), (1, 3, 3), (1, 4, 4),   (2, 1, 2), (2, 2, 4), (2, 3, 6), (2, 4, 8),   (3, 1, 3), (3, 2, 6), (3, 3, 9), (3, 4, 12),  (4, 1, 4), (4, 2, 8), (4, 3, 12), (4, 4, 16)] </code></pre>  <p>And also restrictions:</p>  <pre><code>&gt;&gt;&gt; [(x,y,x*y) for x in range(1,5) for y in range(1,5) if x*y &gt; 8] [(3, 3, 9), (3, 4, 12), (4, 3, 12), (4, 4, 16)] </code></pre>  <p><b>Update</b>: Javascript's syntax is similar (results from using the <a href=""http://squarefree.com/shell/"" rel=""nofollow noreferrer"">javascript shell</a> on firefox):</p>  <pre><code>var nums = [1, 2, 3, 21, 22, 30]; var s = eval('[[i,j] for each (i in nums) for each (j in [3,4]) if (i%2 == 0)]'); s.toSource(); [[2, 3], [2, 4], [22, 3], [22, 4], [30, 3], [30, 4]] </code></pre>  <p>(For some reason, something about the context stuff is evaluated in in the javascript shell requires the eval indirection to have list comprehensions work.  Javascript inside a <code>&lt;script&gt;</code> tag doesn't require that, of course)</p>"
1543820	Comprehensions in Python and Javascript are only very basic?	javascript|python|haskell|list-comprehension	2009-10-09 13:39:13.753000 UTC	"<p>Looking at comprehensions in Python and Javascript, so far I can't see some of the main features that I consider most powerful in comprehensions in languages like Haskell.  </p>  <p>Do they allow things like multiple generators?  Or are they just a basic map-filter form?</p>  <p>If they don't allow multiple generators, I find them quite disappointing - why have such things been left out?</p>"	1543956	"<p>Add an if statement as well...</p>  <pre><code>&gt;&gt;&gt; [(x,y) for x in range(5) for y in range(6) if x % 3 == 0 and y % 2 == 0] [(0, 0), (0, 2), (0, 4), (3, 0), (3, 2), (3, 4)] </code></pre>"
1543820	Comprehensions in Python and Javascript are only very basic?	javascript|python|haskell|list-comprehension	2009-10-09 13:39:13.753000 UTC	"<p>Looking at comprehensions in Python and Javascript, so far I can't see some of the main features that I consider most powerful in comprehensions in languages like Haskell.  </p>  <p>Do they allow things like multiple generators?  Or are they just a basic map-filter form?</p>  <p>If they don't allow multiple generators, I find them quite disappointing - why have such things been left out?</p>"	1543985	"<p>Comprehensions is very powerful in Haskell to a large extent because Haskell is functional, so it makes extremely much sense for them to be. Python is not functional so it makes less sense.</p>  <p>You can make a lot of complex things with comprehensions in Python but it quickly becomes hard to read, thereby defeating the whole purpose (meaning you should do it some other way).</p>  <p>However, as pointed out here, python does allow multiple generators in comprehensions.</p>"
1597766	How to store dynamically generated HTML form elements from Javascript in Python?	javascript|jquery|python|google-app-engine|dhtml	2009-10-20 22:58:39.067000 UTC	"<p>I have an HTML form that a user can add an arbitrary amount of input fields to through jQuery. The user is also able to remove any input field from any position. My current implementation is that each new input box has an id of ""field[i]"" so when the form is posted it is processed in Python as field1, field2 field3, ...field[n]</p>  <pre><code>i = 0 while self.request.get(""field"" + str(i)):         temp = self.request.get(""field"" + str(i))         someList.append(temp)         i += 1 </code></pre>  <p>(Assume the JavaScript handles removing of deleted elements and sorts the field names prior to post for simplicity)</p>  <p>This approach is working for me, but is there a better way to handle this situation? I feel like this is a very brute force method.</p>  <p>Platform information: Python 2.5.4; JavaScript; DHTML; jquery; Google App Engine</p>  <p><strong>Edit:</strong> It appears that self.request.get_all() was the solution: <a href=""http://code.google.com/appengine/docs/python/tools/webapp/requestclass.html#Request_get_all"" rel=""nofollow noreferrer"">GAE Doc</a></p>"	1597786	"<p>You could serialize the data with javascript and pass it in as json. Then you would just have a dictionary to work with in python. You would need something like <a href=""http://code.google.com/p/simplejson/"" rel=""nofollow noreferrer"">simplejson</a>, of course</p>"
1694939	generating javascript string in python	javascript|python|cheetah	2009-11-08 00:39:20.550000 UTC	"<p>i have string stored in python variables, and i am outputting a html that contains javascript, and the i need to create javascript variables.</p>  <p>for ex, in python</p>  <pre><code>title = ""What's your name?"" </code></pre>  <p>i use Cheetah to generate the html. Cheetah code:</p>  <pre><code>var title = '$title'; </code></pre>  <p>how do i escape this correctly so that a correct javascript variable is created? actual html output needed:</p>  <pre><code>var title = 'What\'s your name?'; </code></pre>"	1694950	"<p>You probably want JSON:</p>  <pre><code>import simplejson as sj print sj.dumps('What\'s your name?') # =&gt; '""What\'s your name?""' </code></pre>  <p>Don't generate js with cheetah, there are libraries.</p>"
1694939	generating javascript string in python	javascript|python|cheetah	2009-11-08 00:39:20.550000 UTC	"<p>i have string stored in python variables, and i am outputting a html that contains javascript, and the i need to create javascript variables.</p>  <p>for ex, in python</p>  <pre><code>title = ""What's your name?"" </code></pre>  <p>i use Cheetah to generate the html. Cheetah code:</p>  <pre><code>var title = '$title'; </code></pre>  <p>how do i escape this correctly so that a correct javascript variable is created? actual html output needed:</p>  <pre><code>var title = 'What\'s your name?'; </code></pre>"	1694952	"<p>Either just do <code>title = title.replace(""'"", ""\\'"")</code> in Python before the <code>title</code> value gets to Cheetah, or add a custom filter to Cheetah for the purpose and invoke it in the template.  Doing it on the Python side of things seems simpler, though.</p>"
1703888	Commenting JavaScript functions á la Python Docstrings	javascript|python|comments|docstring	2009-11-09 21:18:49.773000 UTC	"<p>It is valid JavaScript to write something like this:</p>  <pre><code>function example(x) {     ""Here is a short doc what I do."";     // code of the function } </code></pre>  <p>The string actually does nothing. Is there any reason, why one shouldn't comment his/her functions in JavaScript in this way?</p>  <p>Two points I could think of during wiriting the question:</p>  <ul> <li><p>The string literal must be initiated, which could be costly in the long run</p></li> <li><p>The string literal will not be recognized as removable by JS minifiers</p></li> </ul>  <p>Any other points?</p>  <p><strong>Edit:</strong> Why I brought up this topic: I found something like this on <a href=""http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/"" rel=""noreferrer"">John Resig's Blog</a>, where the new ECMA 5 standard uses a not assigned string literal to enable ""strict mode"". Now it was my interest to just evaluate, if there could be uses or dangers in doing such documentation.</p>"	1703923	"<p>There's really no point in doing this in Javascript.  In Python, the string is made available as the <code>__doc__</code> member of the function, class, or module.  So these docstrings are available for introspection, etc.</p>  <p>If you create strings like this in Javascript, you get no benefit over using a comment, plus you get some disadvantages, like the string always being present.</p>"
1703888	Commenting JavaScript functions á la Python Docstrings	javascript|python|comments|docstring	2009-11-09 21:18:49.773000 UTC	"<p>It is valid JavaScript to write something like this:</p>  <pre><code>function example(x) {     ""Here is a short doc what I do."";     // code of the function } </code></pre>  <p>The string actually does nothing. Is there any reason, why one shouldn't comment his/her functions in JavaScript in this way?</p>  <p>Two points I could think of during wiriting the question:</p>  <ul> <li><p>The string literal must be initiated, which could be costly in the long run</p></li> <li><p>The string literal will not be recognized as removable by JS minifiers</p></li> </ul>  <p>Any other points?</p>  <p><strong>Edit:</strong> Why I brought up this topic: I found something like this on <a href=""http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/"" rel=""noreferrer"">John Resig's Blog</a>, where the new ECMA 5 standard uses a not assigned string literal to enable ""strict mode"". Now it was my interest to just evaluate, if there could be uses or dangers in doing such documentation.</p>"	24588123	"<p>I was looking for a way to add multi-line strings to my code without littering it with \n's. It looks like this module fits the bill: <a href=""https://github.com/monolithed/__doc__"" rel=""nofollow"">https://github.com/monolithed/<strong>doc</strong></a></p>  <p>Unfortunately, the comments won't survive minification, but I suppose you could write a compile task to convert docstrings to ""\n"" format.</p>"
1709711	Using Python/Selenium/Best Tool For The Job to get URI of image requests generated through JavaScript?	python|selenium|http-headers|analytics	2009-11-10 17:28:48.047000 UTC	"<p>I have some JavaScript from a 3rd party vendor that is initiating an image request. I would like to figure out the URI of this image request.</p>  <p>I can load the page in my browser, and then monitor ""Live HTTP Headers"" or ""Tamper Data"" in order to figure out the image request URI, but I would prefer to create a command line process to do this.</p>  <p>My intuition is that it might be possible using python + qtwebkit, but perhaps there is a better way.</p>  <p>To clarify: I might have this (overly simplified code).</p>  <pre><code>&lt;script&gt; suffix = magicNumberFunctionIDontHaveAccessTo(); url = ""http://foobar.com/function?parameter="" + suffix img = document.createElement('img'); img.src=url; document.all.body.appendChild(img); &lt;/script&gt; </code></pre>  <p>Then once the page is loaded, I can go figure out the url by sniffing the packets. But I can't just figure it out from the source, because I can't predict the outcome of magicNumberFunction...().</p>  <p>Any help would be muchly appreciated!</p>  <p>Thank you.</p>"	1730260	"<p>Why can't you just read <code>suffix</code>, or <code>url</code> for that matter? Is the image loaded in an iframe or in your page?</p>  <p>If it is loaded in your page, then this may be a <strong>dirty</strong> hack (substitute document.body for whatever element is considered):</p>  <pre><code>var ac = document.body.appendChild; var sources = [];  document.body.appendChild = function(child) {     if (/^img$/i.test(child.tagName)) {         sources.push(child.getAttribute('src'));     }     ac(child); } </code></pre>"
1709711	Using Python/Selenium/Best Tool For The Job to get URI of image requests generated through JavaScript?	python|selenium|http-headers|analytics	2009-11-10 17:28:48.047000 UTC	"<p>I have some JavaScript from a 3rd party vendor that is initiating an image request. I would like to figure out the URI of this image request.</p>  <p>I can load the page in my browser, and then monitor ""Live HTTP Headers"" or ""Tamper Data"" in order to figure out the image request URI, but I would prefer to create a command line process to do this.</p>  <p>My intuition is that it might be possible using python + qtwebkit, but perhaps there is a better way.</p>  <p>To clarify: I might have this (overly simplified code).</p>  <pre><code>&lt;script&gt; suffix = magicNumberFunctionIDontHaveAccessTo(); url = ""http://foobar.com/function?parameter="" + suffix img = document.createElement('img'); img.src=url; document.all.body.appendChild(img); &lt;/script&gt; </code></pre>  <p>Then once the page is loaded, I can go figure out the url by sniffing the packets. But I can't just figure it out from the source, because I can't predict the outcome of magicNumberFunction...().</p>  <p>Any help would be muchly appreciated!</p>  <p>Thank you.</p>"	1738442	"<p>I would pick any one of the many <a href=""http://proxies.xhaus.com/python/"" rel=""nofollow noreferrer"">http proxy servers</a> written in Python -- probably one of the simplest ones at the very top of the list -- and tweak it to record all URLs requested (as well as proxy-serve them) e.g. appending them to a text file -- without loss of generality, call that text file 'XXX.txt'.</p>  <p>Now all you need is a script that: starts the proxy server in question; starts Firefox (or whatever) on your main desired URL with the proxy in question set as your proxy (see e.g. <a href=""https://stackoverflow.com/questions/843340/firefox-proxy-settings-via-command-line"">this SO question</a> for how), though I'm sure other browsers would work just as well; waits a bit (e.g. until the proxy's XXX.txt file has not been altered for more than N seconds); reads XXX.txt to extract only the URLs you care about and record them wherever you wish; turns down the proxy and Firefox processes.</p>  <p>I think this will be much faster to put in place and make work correctly, for your specific requirements, than any more general solution based on qtwebkit, selenium, or other ""automation kits"".</p>"
1709711	Using Python/Selenium/Best Tool For The Job to get URI of image requests generated through JavaScript?	python|selenium|http-headers|analytics	2009-11-10 17:28:48.047000 UTC	"<p>I have some JavaScript from a 3rd party vendor that is initiating an image request. I would like to figure out the URI of this image request.</p>  <p>I can load the page in my browser, and then monitor ""Live HTTP Headers"" or ""Tamper Data"" in order to figure out the image request URI, but I would prefer to create a command line process to do this.</p>  <p>My intuition is that it might be possible using python + qtwebkit, but perhaps there is a better way.</p>  <p>To clarify: I might have this (overly simplified code).</p>  <pre><code>&lt;script&gt; suffix = magicNumberFunctionIDontHaveAccessTo(); url = ""http://foobar.com/function?parameter="" + suffix img = document.createElement('img'); img.src=url; document.all.body.appendChild(img); &lt;/script&gt; </code></pre>  <p>Then once the page is loaded, I can go figure out the url by sniffing the packets. But I can't just figure it out from the source, because I can't predict the outcome of magicNumberFunction...().</p>  <p>Any help would be muchly appreciated!</p>  <p>Thank you.</p>"	1743775	"<p>The simplest thing to do might be to use something like HtmlUnit and skip a real browser entirely. By using Rhino, it can evaluate JavaScript and likely be used to extract that URL out.</p>  <p>That said, if you can't get that working, try out Selenium RC and use the captureNetworkTraffic command (which requires the Selenium instant be started with an option of captureNetworkTraffic=true). This will launch Firefox with a proxy configured and then let you pull the request info back out as JSON/XML/plain text. Then you can parse that content and get what you want.</p>  <p>Try out the <a href=""http://browsermob.com/instant-website-test"" rel=""nofollow noreferrer"">instant test tool</a> that my company offers. If the data you're looking for is in our results (after you click View Details), you'll be able to get it from Selenium. I know, since I wrote the captureNetworkTraffic API for Selenium for my company, BrowserMob.</p>"
1709711	Using Python/Selenium/Best Tool For The Job to get URI of image requests generated through JavaScript?	python|selenium|http-headers|analytics	2009-11-10 17:28:48.047000 UTC	"<p>I have some JavaScript from a 3rd party vendor that is initiating an image request. I would like to figure out the URI of this image request.</p>  <p>I can load the page in my browser, and then monitor ""Live HTTP Headers"" or ""Tamper Data"" in order to figure out the image request URI, but I would prefer to create a command line process to do this.</p>  <p>My intuition is that it might be possible using python + qtwebkit, but perhaps there is a better way.</p>  <p>To clarify: I might have this (overly simplified code).</p>  <pre><code>&lt;script&gt; suffix = magicNumberFunctionIDontHaveAccessTo(); url = ""http://foobar.com/function?parameter="" + suffix img = document.createElement('img'); img.src=url; document.all.body.appendChild(img); &lt;/script&gt; </code></pre>  <p>Then once the page is loaded, I can go figure out the url by sniffing the packets. But I can't just figure it out from the source, because I can't predict the outcome of magicNumberFunction...().</p>  <p>Any help would be muchly appreciated!</p>  <p>Thank you.</p>"	1768554	"<p>Use <a href=""http://getfirebug.com/"" rel=""nofollow noreferrer"">Firebug Firefox plugin</a>. It will show you all requests in real time and you can even debug the JS in your Browser or run it step-by-step.</p>"
1709711	Using Python/Selenium/Best Tool For The Job to get URI of image requests generated through JavaScript?	python|selenium|http-headers|analytics	2009-11-10 17:28:48.047000 UTC	"<p>I have some JavaScript from a 3rd party vendor that is initiating an image request. I would like to figure out the URI of this image request.</p>  <p>I can load the page in my browser, and then monitor ""Live HTTP Headers"" or ""Tamper Data"" in order to figure out the image request URI, but I would prefer to create a command line process to do this.</p>  <p>My intuition is that it might be possible using python + qtwebkit, but perhaps there is a better way.</p>  <p>To clarify: I might have this (overly simplified code).</p>  <pre><code>&lt;script&gt; suffix = magicNumberFunctionIDontHaveAccessTo(); url = ""http://foobar.com/function?parameter="" + suffix img = document.createElement('img'); img.src=url; document.all.body.appendChild(img); &lt;/script&gt; </code></pre>  <p>Then once the page is loaded, I can go figure out the url by sniffing the packets. But I can't just figure it out from the source, because I can't predict the outcome of magicNumberFunction...().</p>  <p>Any help would be muchly appreciated!</p>  <p>Thank you.</p>"	1771133	"<p>Ultimately, I did it in python, using Selenium-RC. This solution requires the python files for selenium-rc, and you need to start the java server (""java -jar selenium-server.jar"")</p>  <pre><code>from selenium import selenium import unittest import lxml.html  class TestMyDomain(unittest.TestCase):     def setUp(self):         self.selenium = selenium(""localhost"", \             4444, ""*firefox"", ""http://www.MyDomain.com"")         self.selenium.start()      def test_mydomain(self):          htmldoc = open('site-list.html').read()         url_list = [link for (element, attribute,link,pos) in lxml.html.iterlinks(htmldoc)]         for url in url_list:              try:                  sel = self.selenium                 sel.open(url)                         sel.select_window(""null"")                 js_code = '''                 myDomainWindow = this.browserbot.getUserWindow();                 for(obj in myDomainWindow) {                       /* This code grabs the OMNITURE tracking pixel img */                     if ((obj.substring(0,4) == 's_i_') &amp;&amp; (myDomainWindow[obj].src)) {                                       var ret = myDomainWindow[obj].src;                     }                  }                         ret;                 '''                 omniture_url = sel.get_eval(js_code) #parse&amp;process this however you want               except Exception, e:                 print 'We ran into an error: %s' % (e,)           self.assertEqual(""expectedValue"", observedValue)       def tearDown(self):         self.selenium.stop()  if __name__ == ""__main__"":     unittest.main() </code></pre>"
1712074	JavaScript equivalent of Python's __setitem__	javascript|python|syntactic-sugar	2009-11-10 23:48:15.303000 UTC	"<pre><code>var obj = {} obj.__setitem__ = function(key, value){   this[key] = value * value } obj.x = 2  // 4 obj.y = 3  // 9 </code></pre>  <p>JavaScript doesn't have __setitem__ and this example obviously doesn't work.</p>  <p>In python <a href=""http://docs.python.org/reference/datamodel.html#object.__setitem__"" rel=""noreferrer"">__setitem__</a> works like:</p>  <pre><code>class CustomDict(dict):   def __setitem__(self, key, value):     super(CustomDict, self).__setitem__(key, value * value)  d = CustomDict() d['x'] = 2  # 4 d['y'] = 3  # 9 </code></pre>  <p>Is it possible to implement __setitem__ behavior in JavaScript? All tricky workarounds would be helpful.</p>"	1712126	"<blockquote>   <p>Is it possible to implement __setitem__ behavior in JavaScript? </p> </blockquote>  <p>No. There is no getter/setter for arbitrary properties in JavaScript.</p>  <p>In Firefox you can use JavaScript 1.5+'s getters and setters to define <code>x</code> and <code>y</code> properties that square their values on assignment, eg.:</p>  <pre><code>var obj= {     _x: 0,     get x() { return this._x; },     set x(v) { this._x=v*v; } }; obj.x= 4; alert(obj.x); </code></pre>  <p>but you would have to declare a setter for each named property you wanted to use in advance. And it won't work cross-browser.</p>"
1712074	JavaScript equivalent of Python's __setitem__	javascript|python|syntactic-sugar	2009-11-10 23:48:15.303000 UTC	"<pre><code>var obj = {} obj.__setitem__ = function(key, value){   this[key] = value * value } obj.x = 2  // 4 obj.y = 3  // 9 </code></pre>  <p>JavaScript doesn't have __setitem__ and this example obviously doesn't work.</p>  <p>In python <a href=""http://docs.python.org/reference/datamodel.html#object.__setitem__"" rel=""noreferrer"">__setitem__</a> works like:</p>  <pre><code>class CustomDict(dict):   def __setitem__(self, key, value):     super(CustomDict, self).__setitem__(key, value * value)  d = CustomDict() d['x'] = 2  # 4 d['y'] = 3  # 9 </code></pre>  <p>Is it possible to implement __setitem__ behavior in JavaScript? All tricky workarounds would be helpful.</p>"	1712135	"<p>I don't think you can override the <code>[]</code> operator in the current version of JavaScript.  In current JavaScript, objects are largely just associative arrays, so the <code>[]</code> operator just adds a key/value pair to an array that is the object.</p> <p>You could write methods that set specific values or even squared a number and added the value as a key/value pair but not by overloading the <code>[]</code> operator.</p> <p>JavaScript2 has some specifications for operator overloading, but that spec is MIA.</p>"
1712074	JavaScript equivalent of Python's __setitem__	javascript|python|syntactic-sugar	2009-11-10 23:48:15.303000 UTC	"<pre><code>var obj = {} obj.__setitem__ = function(key, value){   this[key] = value * value } obj.x = 2  // 4 obj.y = 3  // 9 </code></pre>  <p>JavaScript doesn't have __setitem__ and this example obviously doesn't work.</p>  <p>In python <a href=""http://docs.python.org/reference/datamodel.html#object.__setitem__"" rel=""noreferrer"">__setitem__</a> works like:</p>  <pre><code>class CustomDict(dict):   def __setitem__(self, key, value):     super(CustomDict, self).__setitem__(key, value * value)  d = CustomDict() d['x'] = 2  # 4 d['y'] = 3  # 9 </code></pre>  <p>Is it possible to implement __setitem__ behavior in JavaScript? All tricky workarounds would be helpful.</p>"	1712139	"<p>you can do this (as objects in javascript are also associative arrays):</p>  <pre><code>var obj = {}; obj._ = function(key, value){   this[key] = value * value; } obj._('x', 2);  // 4 obj._('y', 3);  // 9  alert(obj.x + "","" + obj.y); //--&gt; 4,9 </code></pre>"
1712074	JavaScript equivalent of Python's __setitem__	javascript|python|syntactic-sugar	2009-11-10 23:48:15.303000 UTC	"<pre><code>var obj = {} obj.__setitem__ = function(key, value){   this[key] = value * value } obj.x = 2  // 4 obj.y = 3  // 9 </code></pre>  <p>JavaScript doesn't have __setitem__ and this example obviously doesn't work.</p>  <p>In python <a href=""http://docs.python.org/reference/datamodel.html#object.__setitem__"" rel=""noreferrer"">__setitem__</a> works like:</p>  <pre><code>class CustomDict(dict):   def __setitem__(self, key, value):     super(CustomDict, self).__setitem__(key, value * value)  d = CustomDict() d['x'] = 2  # 4 d['y'] = 3  # 9 </code></pre>  <p>Is it possible to implement __setitem__ behavior in JavaScript? All tricky workarounds would be helpful.</p>"	1712152	"<p>No, but there are plans for supporting a similar feature in JavaScript 2. The following object literal syntax has been suggested on <a href=""https://bugzilla.mozilla.org/show_bug.cgi?id=312116"" rel=""noreferrer"">Mozilla bug 312116</a> and it seems that it might be how it will be done for object literals:</p>  <pre><code>({   get * (property) {     // handle property gets here   } }) </code></pre>  <p>I'm assuming set would also be supported (as <code>set * (property, value) {...}</code>).</p>"
1712074	JavaScript equivalent of Python's __setitem__	javascript|python|syntactic-sugar	2009-11-10 23:48:15.303000 UTC	"<pre><code>var obj = {} obj.__setitem__ = function(key, value){   this[key] = value * value } obj.x = 2  // 4 obj.y = 3  // 9 </code></pre>  <p>JavaScript doesn't have __setitem__ and this example obviously doesn't work.</p>  <p>In python <a href=""http://docs.python.org/reference/datamodel.html#object.__setitem__"" rel=""noreferrer"">__setitem__</a> works like:</p>  <pre><code>class CustomDict(dict):   def __setitem__(self, key, value):     super(CustomDict, self).__setitem__(key, value * value)  d = CustomDict() d['x'] = 2  # 4 d['y'] = 3  # 9 </code></pre>  <p>Is it possible to implement __setitem__ behavior in JavaScript? All tricky workarounds would be helpful.</p>"	1749537	"<p>There are no true setters and getters in the commonly implemented Javascript versions, so if you want to emulate the effect you have to use some different syntax. For a property <code>obj.x</code>, using <code>obj.x()</code> to access the value of the property and <code>obj.x(123)</code> to set the value seems like a rather convenient syntax.</p>  <p>It can be implemented like this:</p>  <pre><code>// Basic property class function Property(value) {    this.setter(value); }  Property.prototype.setter = function(value) {    this.value = value * value; }  Property.prototype.getter = function() {    return this.value; }  Property.prototype.access = function(value) {    if (value !== undefined)       this.setter(value);    return this.getter(); }   // generator function to add convenient access syntax function make_property(value) {    var prop = new Property(value);    function propaccess(value) {       return prop.access(value);    }    return propaccess; } </code></pre>  <p>Now properties generated by <code>make_property</code> support the desired syntax and square values they are assigned:</p>  <pre><code>var obj = {    x: make_property(2) };  alert(obj.x()); // 4 obj.x(3);       // set value alert(obj.x()); // 9 </code></pre>"
1764674	How to execute Javascript from Python on Windows?	javascript|python	2009-11-19 16:37:11.473000 UTC	"<p>how can I execute Javascript from Python on Windows?</p>  <p>I want to get python-spidermonkey functionality. Just like this:</p>  <pre><code>&gt;&gt;&gt; class Foo: ...   def hello(self): ...     print ""Hello, Javascript world!"" &gt;&gt;&gt; cx.bind_class(Foo, bind_constructor=True) &gt;&gt;&gt; cx.eval_script(""var f = new Foo(); f.hello();"") Hello, Javascript world! </code></pre>  <p><b>I can't use python-spidermonkey, because it doesn't work in <a href=""https://stackoverflow.com/questions/1727157/how-to-install-python-spidermonkey-on-windows"">windows</a></b></p>"	1764683	"<p>You could call <a href=""http://pypi.python.org/pypi/python-spidermonkey"" rel=""nofollow noreferrer"">SpiderMonkey</a>.</p>"
1764674	How to execute Javascript from Python on Windows?	javascript|python	2009-11-19 16:37:11.473000 UTC	"<p>how can I execute Javascript from Python on Windows?</p>  <p>I want to get python-spidermonkey functionality. Just like this:</p>  <pre><code>&gt;&gt;&gt; class Foo: ...   def hello(self): ...     print ""Hello, Javascript world!"" &gt;&gt;&gt; cx.bind_class(Foo, bind_constructor=True) &gt;&gt;&gt; cx.eval_script(""var f = new Foo(); f.hello();"") Hello, Javascript world! </code></pre>  <p><b>I can't use python-spidermonkey, because it doesn't work in <a href=""https://stackoverflow.com/questions/1727157/how-to-install-python-spidermonkey-on-windows"">windows</a></b></p>"	1787560	"<p>How about pyv8: <a href=""http://code.google.com/p/pyv8/"" rel=""nofollow noreferrer"">http://code.google.com/p/pyv8/</a></p>"
1782132	How to pass data from javascript to python?	javascript	2009-11-23 09:50:21.403000 UTC	"<p>I have a javascript file, on click of a submit button i need to pass user information to my python exe?</p>  <p>From the python exe i need to load and a call a function in my vc++ dll?</p>  <p>Please provide me your valuable inputs?</p>"	1782139	"<p>Er - is this in a browser context? I apologize if not..</p>  <p>You'd probably need to use <code>XMLHttpRequest</code> to make an HTTP request to your server-side script and pass variables either through <code>GET</code> or <code>POST</code>.</p>  <p>See <a href=""http://xkr.us/code/javascript/XHConn/"" rel=""nofollow noreferrer"">http://xkr.us/code/javascript/XHConn/</a> for a decent minimal cross-browser script.</p>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1786550	"<p>In Python, whitespace is part of the language. In Javascript, braces define code blocks and spaces are ignored. Furthermore, Python has bindings for the Java API, .net, and other cool fancy libraries. Javascript is pretty limited in the library department when compared to Python, but it has some neat windowing libraries and such.</p>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1786573	"<p>Being a JavaScript developer and done some Python stuff (thanks to Google App Engine) I would say that the two major differences between JavaScript and Python would be</p>  <ul> <li><p>Formatting. JavaScript doesn't care about the looks of your code (think of all the code minimizers and what the resulting looks like)</p></li> <li><p>Unicode support. JavaScript is all the way unicode, GAE's Python 2.5 not so much (having Latin 1 as the default character set). So having the need to support non-latin characters can be a real PITA if your'e not sure what you are doing.</p></li> </ul>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1786584	"<ol> <li>Classical inheritance in Python, Prototypal inheritance in ECMAScript</li> <li>ECMAScript is a braces and semicolons language while Python is white-space and indent/block based</li> <li>No <code>var</code> keyword in Python, implicit globals in ECMAScript, both are lexically scoped</li> <li>Closures in Python 2.5 and lower ( re: Alex Martelli's comment ) are somewhat ""limited"" because the bindings are read-only, you can't access private variables like you could in ECMAScript </li> <li>There's no <code>undefined</code> in Python, exceptions are thrown</li> <li>Immutable list arrays in Python ( tuples )</li> <li>No <code>switch</code> statement in Python but instead you're encouraged to use a dictionary in that manner, sometimes its convenient assigning properties to lambdas and executing them</li> <li>ECMAScript 3 does not have a <code>yield</code> statement, nor <code>let</code> expressions/statements, nor <code>array comprehension</code>s - however these are included in Mozilla's JS which is non-standard</li> <li><code>raise</code> vs <code>throw</code>, <code>except</code> vs <code>catch</code> ( Python, JS )</li> <li>Native Unicode strings in ECMAScript</li> <li>keyword operators such as <code>and</code>, <code>is</code>, and <code>not</code> are used in Python</li> <li>Python doesn't support counters such as <code>i++</code></li> <li>Python's for loop is ""smart"" so you don't need to use a counter for enumerating through lists, nor do you run into prototypal properties inherited from <code>Object.prototype</code> </li> <li>You don't have to use the <code>new</code> operator in Python to create objects</li> <li>Python is duck-typed</li> </ol>  <p>I stole a good bit of info from <a href=""http://hg.toolness.com/python-for-js-programmers/raw-file/tip/PythonForJsProgrammers.html"" rel=""noreferrer"">http://hg.toolness.com/python-for-js-programmers/raw-file/tip/PythonForJsProgrammers.html</a></p>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1786635	"<p><strong>Typing</strong>: Javascript and Python are both <em>dynamically</em> typed, whereas javascript is <em>weakly</em>, python <em>strongly</em> typed.</p>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1786753	"<p>In python, ""self"" is explicitly passed to a member function, and is not a special keyword or anything. In javascript, ""this"" is dynamically scoped. you can fiddle with the scope of a member function by calling apply() on it.</p>"
1786522	How different are the semantics between Python and JavaScript?	javascript|python|semantics	2009-11-23 22:30:41.587000 UTC	"<p>Both these languages seem extremely similar to me.  Although Python supports actual classes instead of being prototype-based, in Python classes are not all that different from functions that generate objects containing values and functions, just as you'd do in JavaScript.  On the other hand, JavaScript only supports floating-point numbers and strings as built-in data types.</p>  <p>These seem like fairly shallow differences to me, so these things aside, what are some more important differences between them?</p>"	1787630	"<p>I'll add a few I haven't seen mentioned yet:</p>  <ul> <li>JavaScript supports object-literal notation.  Python doesn't exactly work the same way, but Python dictionaries are similar to JavaScript associative arrays.  </li> <li><p>JavaScript objects/arrays support that cool feature where you don't need to quote (single-word) strings when creating new objects:</p>  <p>var foo = { bar: ""baz"" };</p></li> <li><p>Accessing associative array keys in JavaScript can be done using dot notation, in addition to brace notation.  That is, these are the same:</p>  <p>foo.bar; //returns ""baz""</p>  <p>foo[""bar""]; // returns ""baz""</p></li> <li><p>Python's anonymous function (<code>lambda</code>) syntax is not as flexible as JavaScript's anonymous functions.</p></li> <li>Python has, like, a standard library and stuff.  (And yes, I know about Rhino et al., but the libraries they give you are not <em>standard</em>.  There's no standardized way to read a file in JavaScript... that I know of.)</li> <li>You can run JavaScript in a browser. Python... not so much.  ;)</li> </ul>"
1833776	Javascript + python url-en/decoding problem	javascript|python|urlencode|zope	2009-12-02 15:49:53.577000 UTC	"<p>Hi there im kinda stucked with the url encoding between python and javascript, i hope you can help me out :S</p>  <p>Javascript:</p>  <pre><code>encodeURIComponent('lôl'); -&gt; ""l%C3%B4l"" </code></pre>  <p>Python:</p>  <pre><code>import urllib test = container.REQUEST.form.get('test') print test print urllib.unquote(test) -&gt; ""lÃŽl"" -&gt; ""lÃŽl"" </code></pre>  <p>Javascript encodes ""lôl"" twice however python does that once with it, i dunno how to escape from there because i receive anyway throgh the Prototype HTTP GET request ""l%C3%B4l"" instead of ""l%F4l""</p>  <p>Best Regards Bny</p>  <p>**edit its on a zope webserver</p>"	1833829	<p>zope already url-decodes it - issue is that you're getting a utf-8 bytestring and printing it on a non-utf-8 terminal. Try decoding the string.</p>  <pre><code>x = 'l\xc3\xb4l' unicode_x = x.decode('utf-8') print unicode_x </code></pre>
1854806	Is there an Open Source Python library for sanitizing HTML and removing all Javascript?	javascript|python|parsing|xss	2009-12-06 08:51:41.520000 UTC	"<p>I want to write a web application that allows users to enter any HTML that can occur inside a <code>&lt;div&gt;</code> element.  This HTML will then end up being displayed to other users, so I want to make sure that the site doesn't open people up to XSS attacks.</p> <p>Is there a nice library in Python that will clean out all the event handler attributes, <code>&lt;script&gt;</code> elements and other Javascript cruft from HTML or a DOM tree?</p> <p>I am intending to use Beautiful Soup to regularize the HTML to make sure it doesn't contain unclosed tags and such.  But, as far as I can tell, it has no pre-packaged way to strip all Javascript.</p> <p>If there is a nice library in some other language, that might also work, but I would really prefer Python.</p> <p>I've done a bunch of Google searching and hunted around on pypi, but haven't been able to find anything obvious.</p> <h3>Related</h3> <ul> <li><a href=""https://stackoverflow.com/questions/16861/sanitising-user-input-using-python"">Sanitising user input using Python</a></li> </ul>"	1854817	"<p>You could use <a href=""http://www.crummy.com/software/BeautifulSoup/"" rel=""nofollow noreferrer"">BeautifulSoup</a>. It allows you to traverse the markup structure fairly easily, even if it's not well-formed. I don't know that there's something made to order that works only on script tags.</p>"
1854806	Is there an Open Source Python library for sanitizing HTML and removing all Javascript?	javascript|python|parsing|xss	2009-12-06 08:51:41.520000 UTC	"<p>I want to write a web application that allows users to enter any HTML that can occur inside a <code>&lt;div&gt;</code> element.  This HTML will then end up being displayed to other users, so I want to make sure that the site doesn't open people up to XSS attacks.</p> <p>Is there a nice library in Python that will clean out all the event handler attributes, <code>&lt;script&gt;</code> elements and other Javascript cruft from HTML or a DOM tree?</p> <p>I am intending to use Beautiful Soup to regularize the HTML to make sure it doesn't contain unclosed tags and such.  But, as far as I can tell, it has no pre-packaged way to strip all Javascript.</p> <p>If there is a nice library in some other language, that might also work, but I would really prefer Python.</p> <p>I've done a bunch of Google searching and hunted around on pypi, but haven't been able to find anything obvious.</p> <h3>Related</h3> <ul> <li><a href=""https://stackoverflow.com/questions/16861/sanitising-user-input-using-python"">Sanitising user input using Python</a></li> </ul>"	1854818	<p>I would honestly look at using something like bbcode or some other alternative markup with it.</p>
1854806	Is there an Open Source Python library for sanitizing HTML and removing all Javascript?	javascript|python|parsing|xss	2009-12-06 08:51:41.520000 UTC	"<p>I want to write a web application that allows users to enter any HTML that can occur inside a <code>&lt;div&gt;</code> element.  This HTML will then end up being displayed to other users, so I want to make sure that the site doesn't open people up to XSS attacks.</p> <p>Is there a nice library in Python that will clean out all the event handler attributes, <code>&lt;script&gt;</code> elements and other Javascript cruft from HTML or a DOM tree?</p> <p>I am intending to use Beautiful Soup to regularize the HTML to make sure it doesn't contain unclosed tags and such.  But, as far as I can tell, it has no pre-packaged way to strip all Javascript.</p> <p>If there is a nice library in some other language, that might also work, but I would really prefer Python.</p> <p>I've done a bunch of Google searching and hunted around on pypi, but haven't been able to find anything obvious.</p> <h3>Related</h3> <ul> <li><a href=""https://stackoverflow.com/questions/16861/sanitising-user-input-using-python"">Sanitising user input using Python</a></li> </ul>"	1855343	"<p>As Klaus mentions, the clear consensus in the community is to use BeautifulSoup for these tasks:</p>  <pre><code>soup = BeautifulSoup.BeautifulSoup(html) for script_elt in soup.findAll('script'):     script_elt.extract() html = str(soup) </code></pre>"
1854806	Is there an Open Source Python library for sanitizing HTML and removing all Javascript?	javascript|python|parsing|xss	2009-12-06 08:51:41.520000 UTC	"<p>I want to write a web application that allows users to enter any HTML that can occur inside a <code>&lt;div&gt;</code> element.  This HTML will then end up being displayed to other users, so I want to make sure that the site doesn't open people up to XSS attacks.</p> <p>Is there a nice library in Python that will clean out all the event handler attributes, <code>&lt;script&gt;</code> elements and other Javascript cruft from HTML or a DOM tree?</p> <p>I am intending to use Beautiful Soup to regularize the HTML to make sure it doesn't contain unclosed tags and such.  But, as far as I can tell, it has no pre-packaged way to strip all Javascript.</p> <p>If there is a nice library in some other language, that might also work, but I would really prefer Python.</p> <p>I've done a bunch of Google searching and hunted around on pypi, but haven't been able to find anything obvious.</p> <h3>Related</h3> <ul> <li><a href=""https://stackoverflow.com/questions/16861/sanitising-user-input-using-python"">Sanitising user input using Python</a></li> </ul>"	1855818	"<p>Whitelist approach to allowed tags, attributes and their values is the only reliable way. Take a look at <a href=""http://code.activestate.com/recipes/496942/"" rel=""nofollow noreferrer"">Recipe 496942: Cross-site scripting (XSS) defense</a></p>  <p>What is wrong with existing markup languages such as used on this very site?</p>"
1854806	Is there an Open Source Python library for sanitizing HTML and removing all Javascript?	javascript|python|parsing|xss	2009-12-06 08:51:41.520000 UTC	"<p>I want to write a web application that allows users to enter any HTML that can occur inside a <code>&lt;div&gt;</code> element.  This HTML will then end up being displayed to other users, so I want to make sure that the site doesn't open people up to XSS attacks.</p> <p>Is there a nice library in Python that will clean out all the event handler attributes, <code>&lt;script&gt;</code> elements and other Javascript cruft from HTML or a DOM tree?</p> <p>I am intending to use Beautiful Soup to regularize the HTML to make sure it doesn't contain unclosed tags and such.  But, as far as I can tell, it has no pre-packaged way to strip all Javascript.</p> <p>If there is a nice library in some other language, that might also work, but I would really prefer Python.</p> <p>I've done a bunch of Google searching and hunted around on pypi, but haven't been able to find anything obvious.</p> <h3>Related</h3> <ul> <li><a href=""https://stackoverflow.com/questions/16861/sanitising-user-input-using-python"">Sanitising user input using Python</a></li> </ul>"	1857575	"<p>Eric,</p>  <p>Have you thought about using a 'SAX' type parser for the HTML?  I'm really not sure though that it would ignore the events properly though.  It would also be a bit harder to construct than using something like Beautiful Soup.   Handling syntax errors may be a problem with SAX as well. </p>  <p>What I like to do in situations like this is to construct python objects (subclassed from an XML_Element class) from the parsed HTML. Then remove any undesired objects from the tree, and finally re-serialize the objects back to html.  It's not all that hard in python.</p>  <p>Regards, </p>"
1857739	Questionnaire/survey app like Google Form - (python+javascript)	python|survey	2009-12-07 04:03:45.197000 UTC	"<p>Django-survey or django-questionnaire is too admin-centric for me (beside tied to django). I want my user to create their own survey. Something like Google Form survey (view <a href=""http://spreadsheets.google.com/viewform?formkey=dENteVBPMmFiZGFxbm5ZUHFrNFBsRnc6MA"" rel=""nofollow noreferrer"" title=""view example"">example</a>), where form creation feels fluid and intuitive (because of js magic). I've googling around with no luck. </p>  <p>Is there any python-based survey app/library/package out there? I'm OK if i have to write my own model/python-wise but not so sure in designing the creation process (javascript). Do you have suggestion of what Javascript library may suit this?</p>  <p>Thanks.</p>"	1872501	"<p>Have tried taking a look at <a href=""http://code.google.com/appengine/"" rel=""nofollow noreferrer"">google app engine</a>? It really is not just a survey library, but much much more - and since it gives you Python APIs it probably is not too hard to create a web service that can be used by your users to create new surveys.</p>  <p><a href=""http://code.google.com/appengine/docs/python/gettingstarted/"" rel=""nofollow noreferrer"">Here is the python documentation</a> and <a href=""http://code.google.com/appengine/docs/python/gettingstarted/handlingforms.html"" rel=""nofollow noreferrer"">here are the docs for form handling</a></p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	1901175	"<p>This wouldn't be done in an extension but more likely a plugin (a sometimes obscure but notable difference.) </p>  <p>I'm not aware of any plugins right now that expose Python directly, but there are a couple of ways I've heard of to make it work indirectly. For example: you can get IronPython (a .Net driven version) <a href=""http://www.voidspace.org.uk/ironpython/silverlight/pycon.html"" rel=""nofollow noreferrer"">running through Silverlight</a>. There's also a <a href=""http://ask.slashdot.org/article.pl?sid=01/09/18/1650245"" rel=""nofollow noreferrer"">slashdot article</a> about the subject you may find interesting.</p>  <p>Otherwise, no. I don't believe there's a direct way to do it today. Not that I wouldn't love one. :)</p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	1901178	"<p>I am not 100% sure, but I do know for a fact that on Google Chrome you can't: you would need either:</p>  <ol> <li>an HTTP ""gateway"" of some sort</li> <li>an NPAPI plugin</li> </ol>  <p>The situation is likely the same on the Firefox case because of security concerns.</p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	1901212	"<p>You may wish to look at the <a href=""http://www.codestrong.com/titanium/guides/python/"" rel=""nofollow noreferrer"" title=""Titanium Desktop"">Titanium Desktop</a>.  It has a great API that allows you to call Python easily from within Javascript.</p>  <p>Eg:</p>  <pre><code>&lt;script type=""text/python"" src=""myfile.py""/&gt; </code></pre>  <p>It uses the Kroll Python Bridge to extend and call the functions with simple <code>&lt;script&gt;</code> tags.</p>  <p>You can easily pass integers, floating point numbers, booleans, objects, it's all there.</p>  <p>The aforementioned link has several examples of its simple usage, and naturally it's available for download. :)</p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	1901261	"<p>You could build a native Firefox extension that uses libpython to run your python code. From that, export an interface that enables your Javascript code to call python running in your extension.</p>  <p>It appears that there is a Firefox python extension that may enable you to do what you want:   <a href=""http://pyxpcomext.mozdev.org/"" rel=""nofollow noreferrer"">http://pyxpcomext.mozdev.org/</a></p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	1901267	"<p>You would either need a browser with builtin python support (but this is not a ""standard"", hence it would defeat the purpose of using a webapp - if you need a special client, you can better use a classic gui), or a way to translate Python to Javascript; there three options for this at the time:</p>  <ul> <li>Pyjamas </li> <li>Skulpt </li> <li>PyPy </li> </ul>  <p>On the contrary, if you <em>just</em> want to extend Firefox, take a look at this: <a href=""http://pyxpcomext.mozdev.org/"" rel=""nofollow noreferrer"">http://pyxpcomext.mozdev.org/</a></p>"
1901093	Calling Python from JavaScript	javascript|python	2009-12-14 14:00:18.777000 UTC	"<p>Is there a simple way to call Python libraries from JavaScript? Especially from the inside of a Firefox extension.</p>  <p>A good option to compile a pure Python library would also be great. I looked at <a href=""http://en.wikipedia.org/wiki/Pyjamas_(software)"" rel=""noreferrer"">Pyjamas</a>, but it seems to offer only partial support for Python.</p>"	12710576	"<p>Take a look to the <a href=""https://github.com/niedbalski/slurpy"" rel=""nofollow"">https://github.com/niedbalski/slurpy</a> Slurpy project, it implements two way communications as RPC mechanism.</p>  <pre><code>        python = new Slurpy();         python.on('loaded', function(evt) {             python.sum(10.5,1000, function(response) {                 alert(response);                 });         }); </code></pre>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	1916748	"<p>You might be better off using a tool like <a href=""http://seleniumhq.org/"" rel=""noreferrer"">Selenium</a> to automate the scraping using a web browser, so the JS executes and the page renders just like it would for a real user.</p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	1916779	"<p>You could also try defining <a href=""http://groups.csail.mit.edu/uid/chickenfoot/"" rel=""nofollow noreferrer"">Chickenfoot</a> page triggers on the pages in question, executing whatever operations you want on the page and saving the results of the operation to a local file, and calling Firefox from the command line inside your program, followed by reading the file.</p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	1917551	"<p>The <a href=""http://code.google.com/p/pyv8/"" rel=""noreferrer"">PyV8</a> package nicely wraps <a href=""http://code.google.com/apis/v8/"" rel=""noreferrer"">Google's V8 Javascript engine</a> for Python.  It's particularly nice because not only can you call from Python to Javascript code, but you can call back from Javascript to Python code.  This makes it quite straightforward to implement the usual browser-supplied objects (that is, everything in the Javascript global namespace: ""window"", ""document"", and so on), which you'd need to do if you were going to make a Javascript-capable Python browser emulator thing, possibly by hooking this up with <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>.</p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	3009645	"<p>i recommend that you take a look at some of the options available to you at <a href=""http://wiki.python.org/moin/WebBrowserProgramming"" rel=""nofollow noreferrer"">http://wiki.python.org/moin/WebBrowserProgramming</a> - surprisingly this is coming up as a common question (i've found three on stackoverflow today, by searching for the words ""python browser"" on google).  if you do the same you'll find the other answers i gave.</p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	3849879	"<p>you may try zope browser</p>  <p><a href=""http://pypi.python.org/pypi?:action=display&amp;name=zope.testbrowser"" rel=""nofollow"">http://pypi.python.org/pypi?:action=display&amp;name=zope.testbrowser</a></p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	5459345	"<p>There is also spynner "" a stateful programmatic web browser module for Python with Javascript/AJAX support based on the QtWebkit framework"" : <a href=""http://code.google.com/p/spynner/"" rel=""nofollow"">http://code.google.com/p/spynner/</a></p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	6603138	"<p>My favorite is <a href=""https://github.com/kanzure/pyphantomjs"" rel=""nofollow"">PyPhantomJS</a>. It's written using Python and PyQt4. It's completely headless and you can control it completely from JavaScript.</p>  <p>However, if you are looking to actually see the page, you can use <code>QWebView</code> from PyQt4 as well.</p>"
1916711	Programmatic Python Browser with JavaScript	javascript|python|browser|screen-scraping|mechanize	2009-12-16 18:37:08.033000 UTC	"<p>I want to screen-scrape a web-site that uses JavaScript. </p>  <p>There is <a href=""http://wwwsearch.sourceforge.net/mechanize/"" rel=""noreferrer"">mechanize</a>, the programmatic web browser for Python. However, it (understandably) doesn't interpret javascript. Is there any programmatic browser for Python which does? If not, is there any JavaScript implementation in Python that I could use to attempt to create one?</p>"	72516044	"<p><a href=""https://playwright.dev/python"" rel=""nofollow noreferrer"">Playwright</a> or <a href=""https://github.com/pyppeteer/pyppeteer"" rel=""nofollow noreferrer"">pyppeteer</a> are both reasonably good, and use headless Chromium to render pages and interpret JavaScript.</p> <p>I'd pick Playwright out of the two, simply because it's backed by a larger entity, and supports Chromium/Firefox/WebKit out of the box.</p>"
1918817	How can I do python/ruby/javascript style generators in actionscript?	python|actionscript|generator|coroutine	2009-12-17 00:50:26.777000 UTC	"<p>I want to use coroutines in actionscript to implement a state machine.</p>  <p>I'd like to be able to do something like the following</p>  <pre><code>function stateMachine():void {    sendBytes(0xFFFF);    var receiveBytes:ByteArray = yield()    sendBytes(receiveBytes); }  stateMachine.send( Socket.read() )  </code></pre>  <p>like in this <a href=""http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/"" rel=""nofollow noreferrer"">blog entry</a></p>"	1920570	"<p>Well, how about this?</p>  <pre><code>function stateMachine(socket:Socket, target:YourReceiverClass):void {    target.sendBytes(0xFFFF);    var receiveByte:int = socket.readByte();    target.sendBytes(receiveByte); }  stateMachine( mySocket ) </code></pre>"
1918817	How can I do python/ruby/javascript style generators in actionscript?	python|actionscript|generator|coroutine	2009-12-17 00:50:26.777000 UTC	"<p>I want to use coroutines in actionscript to implement a state machine.</p>  <p>I'd like to be able to do something like the following</p>  <pre><code>function stateMachine():void {    sendBytes(0xFFFF);    var receiveBytes:ByteArray = yield()    sendBytes(receiveBytes); }  stateMachine.send( Socket.read() )  </code></pre>  <p>like in this <a href=""http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/"" rel=""nofollow noreferrer"">blog entry</a></p>"	1925533	"<p>As far as I know, Actionscript doesn't have coroutines, continuations or anything that will give you the relevant behavior (call a function without pushing a stack frame). You can fake it using static variables and a <code>switch</code>, but that defeats the purpose of using coroutines for state machines. Also, without tail calls (still only a <a href=""http://wiki.ecmascript.org/doku.php?id=proposals:proper_tail_calls"" rel=""nofollow noreferrer"">proposal for ECMASCRIPT</a>, as far as I know), faked coroutines won't use constant stack space as real coroutines do.</p>  <p>Regarding your sample code, coroutines generally need to loop to be useful.</p>"
