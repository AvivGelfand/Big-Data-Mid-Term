39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<p>Well, I don't think that there is something like that in js. You can always use eval instead of locals(). Like this: </p>  <pre><code>eval(s+""()""); </code></pre>  <p>You just have to know that actually function <em>foo</em> exists.</p>  <p><strong>Edit:</strong></p>  <p>Don't use eval:) Use:</p>  <pre><code>var functionName=""myFunctionName""; window[functionName](); </code></pre>"
39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<p>I seem to remember Brendan Eich commented on this in a recent podcast; if i recall correctly, it's not being considered, as it adds unreasonable restrictions to optimization. He compared it to the <code>arguments</code> local in that, while useful for varargs, its very existence removes the ability to guess at what a function will touch just by looking at its definition. </p>  <p>BTW: i believe JS <em>did</em> have support for accessing locals through the arguments local at one time - <a href=""http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Functions/arguments"" rel=""nofollow noreferrer"">a quick search</a> shows this has been deprecated though.</p>"
39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<p>@pkaeding</p>  <p>Yes, you're right. <em>window[functionName]()</em> doesn't work in this case, but <em>eval</em> does. If I needed something like this, I'd create my own object to keep those functions together.</p>  <pre><code>var func = {}; func.bar = ...; var s = ""bar""; func[s](); </code></pre>"
39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<p>@e-bartek, I think that window[functionName] won't work if you in some closure, and the function name is local to that closure.  For example:</p>  <pre><code>function foo() {     var bar = function () {         alert('hello world');     };     var s = 'bar';     window[s](); // this won't work } </code></pre>  <p>In this case, s is 'bar', but the function 'bar' only exists inside the scope of the function 'foo'.  It is not defined in the window scope.</p>  <p>Of course, this doesn't really answer the original question, I just wanted to chime in on this response.  I don't believe there is a way to do what the original question asked.</p>"
39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<ul> <li><p>locals() - No. </p></li> <li><p>globals() - Yes.</p></li> </ul>  <p><code>window</code> is a reference to the global scope, like <code>globals()</code> in python.</p>  <pre><code>globals()[""foo""] </code></pre>  <p>is the same as:</p>  <pre><code>window[""foo""] </code></pre>"
39960	Javascript equivalent of Python's locals()?	javascript|python	2008-09-02 16:29:30.997000 UTC	"<p>In Python one can get a dictionary of all local and global variables in the current scope with the built-in functions <code>locals()</code> and <code>globals()</code>.  Is there some equivalent way of doing this in Javascript?  For instance, I would like to do something like the following:</p>  <pre><code>var foo = function(){ alert('foo'); }; var bar = function(){ alert('bar'); };  var s = 'foo'; locals()[s](); // alerts 'foo' </code></pre>  <p>Is this at all possible, or should I just be using a local object for the lookup?</p>"	"<p>AFAIK, no. If you just want to check the existence of a given variable, you can do it by testing for it, something like this:</p>  <pre><code>if (foo) foo(); </code></pre>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>I personally use SpiderMonkey, but here's an extensive list of <a href=""http://www.discerning.com/burstproject.org/build/doc/shells.html"" rel=""noreferrer"">ECMAScript shells</a></p>  <p>Example spidermonkey install and use on Ubuntu:</p>  <pre><code>$ sudo apt-get install spidermonkey $ js myfile.js output $ js js&gt; var f = function(){}; js&gt; f(); </code></pre>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>You'll need some server-side JavaScript interpreter. Check out the following <a href=""http://peter.michaux.ca/article/3001"" rel=""nofollow noreferrer"">blog post</a>. Something such as <a href=""http://www.mozilla.org/rhino/"" rel=""nofollow noreferrer"">Rhino</a> might be useful for you.</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>There are four big javascript interpreters currently. V8, Squirrelfish, Spidermonkey and Rhino.  I think more important than performance is how well it integrates into existing infrastructure, and I guess Rhino with its bridge to Java wins here.</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>FYI, there is a built-in one already on modern windows platforms. You need to use JScript, but it's close enough. Same environment also allows for VBScript. To run a program you can execute something like:</p>  <p>cscript foo.js </p>  <p>The windows system API is a bit weird and frustrating if you expect the same flexibility as with basic JS objects, but they do have thorough documentation if you can handle digging through the MSDN pages and seeing all the examples in VBScript. </p>  <p>Not sure what's available for Linux/Mac in terms of js shell. </p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>Of course, in Windows, the JavaScript interpreter is shipped with the OS.</p>  <p>Just run <code>cscript</code> or <code>wscript</code> against any .js file.</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>In my years I've found most Javascript developers find it quite easy to transfer over to PHP and vice versa - it isn't a direct answer to your question, although if you're working in ActionScript and JavaScript then you're best to stick with something like PHP (if you're not willing to move to Java, and stick with the ECMA base)</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>On the 'easy to translate' theme, there's also <a href=""http://www.luausers.org"" rel=""nofollow noreferrer"">Lua</a>.</p>  <p>It's somewhat similar to Javascript, but more 'orthogonal' (closer to functional roots).</p>  <p>The heavy orientation to 'pure' programming theory has made it really small and fast.  It's the fastest scripting language around, and the JIT runs circles around the new JavaScript JITs that are starting to appear.</p>  <p>Also, since it was originally thought as an extension language, it has a very nice and clean interface to C, making it very easy to create bindings to any C library you might want to access.</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	<p>Node.JS. It's great. Has many modules. you can do all your file scripting with Node.</p>
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>Try <a href=""http://code.google.com/p/jslibs/"" rel=""nofollow noreferrer"">jslibs</a>, a scripting-focused standalone JS runtime and set of libraries that uses SpiderMonkey (the Gecko JS engine).</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>Well, for safety reasons, javascript had not been provided with file access right by design. So as a scripting language, it's a bit limited.</p>  <p>But still, if you really want to, spider monkey is your best option. Here is a tuto :</p>  <p><a href=""http://developer.mozilla.org/en/Introduction_to_the_JavaScript_shell"" rel=""nofollow noreferrer"">http://developer.mozilla.org/en/Introduction_to_the_JavaScript_shell</a></p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>You might try toying around with <a href=""http://trac.webkit.org/wiki/SquirrelFish"" rel=""nofollow noreferrer"">SquirrelFish</a> or <a href=""http://code.google.com/p/v8/"" rel=""nofollow noreferrer"">v8</a>, both should be runnable on the command line.</p>"
112112	Javascript interpreter to replace Python	javascript|shell|scripting	2008-09-21 20:52:55.823000 UTC	"<p>In terms of quick dynamically typed languages, I'm really starting to like Javascript, as I use it a lot for web projects, especially because it uses the same syntax as Actionscript (flash).</p>  <p>It would be an ideal language for shell scripting, making it easier to move code from the front and back end of a site, and less of the strange syntax of python.</p>  <p>Is there a good, javascript interpreter that is easy to install (I know there's one based on java, but that would mean installing all the java stuff to use), </p>"	"<p>Google's <a href=""http://code.google.com/apis/v8/build.html"" rel=""nofollow noreferrer"">V8</a> can be used as a standalone interpreter. Configuring with <code>scons sample=shell</code> will build an executable named <code>shell</code>, that can be called like so: <code>./shell file.js</code>.</p>"
126131	Python library for rendering HTML and javascript	javascript|python|html	2008-09-24 09:05:57.823000 UTC	<p>Is there any python module for rendering a HTML page with javascript and get back a DOM object?</p>  <p>I want to parse a page which generates almost all of its content using javascript. </p>	"<p>You can probably use <a href=""http://code.google.com/p/pywebkitgtk/"" rel=""nofollow noreferrer"">python-webkit</a> for it.  Requires a running glib and GTK, but that's probably less problematic than wrapping the parts of webkit without glib.</p>  <p>I don't know if it does everything you need, but I guess you should give it a try.</p>"
126131	Python library for rendering HTML and javascript	javascript|python|html	2008-09-24 09:05:57.823000 UTC	<p>Is there any python module for rendering a HTML page with javascript and get back a DOM object?</p>  <p>I want to parse a page which generates almost all of its content using javascript. </p>	"<p>The big complication here is emulating the full browser environment outside of a browser. You can use stand alone javascript interpreters like Rhino and SpiderMonkey to run javascript code but they don't provide a complete browser like environment to full render a web page.</p>  <p>If I needed to solve a problem like this I would first look at how the javascript is rendering the page, it's quite possible it's fetching data via AJAX and using that to render the page. I could then use python libraries like simplejson and httplib2 to directly fetch the data and use that, negating the need to access the DOM object. However, that's only one possible situation, I don't know the exact problem you are solving.</p>  <p>Other options include the selenium one mentioned by Łukasz, some kind of webkit embedded craziness, some kind of IE win32 scripting craziness or, finally, a pyxpcom based solution (with added craziness). All these have the drawback of requiring pretty much a fully running web browser for python to play with, which might not be an option depending on your environment.</p>"
205204	Starting a new database driven python web application would you use a javascript widget framework? If so which framework?	javascript|python|frameworks	2008-10-15 15:37:16.373000 UTC	<p>I am starting a new web application project. I want to use python as I am using it at my bread-and-butter-job.</p>  <p>However I don't want to reinvent the wheel. Some things I have thought about:</p>  <ul> <li><p>AJAX would be nice if it’s not too much of a hazzle. </p></li> <li><p>It is best if the licensing allows commercialization but is not crucial at this point.</p></li> <li><p>It could also be funny to try out the Google App Engine if the tools will let me.</p></li> </ul>  <p>Should I be using a javascript UI framework or should I go for standard HTML forms? </p>  <p>Which framework would you recommend?</p>	"<p>I'd take a look at <a href=""http://web2py.com/"" rel=""nofollow noreferrer"">web2py</a>. It's a full-stack framework that requires no configuration and is easy to try out - everything can be driven via a web interface if you choose. I've dabbled with other frameworks and it's by far the easiest to setup and includes lots of helpful things for free. The documentation is good and there is a howto for getting it to work under Google App Engine. It comes with libraries and a howto for Ajax. As far as I remember the licence doesn't restrict using it in commercial applications.</p>"
205204	Starting a new database driven python web application would you use a javascript widget framework? If so which framework?	javascript|python|frameworks	2008-10-15 15:37:16.373000 UTC	<p>I am starting a new web application project. I want to use python as I am using it at my bread-and-butter-job.</p>  <p>However I don't want to reinvent the wheel. Some things I have thought about:</p>  <ul> <li><p>AJAX would be nice if it’s not too much of a hazzle. </p></li> <li><p>It is best if the licensing allows commercialization but is not crucial at this point.</p></li> <li><p>It could also be funny to try out the Google App Engine if the tools will let me.</p></li> </ul>  <p>Should I be using a javascript UI framework or should I go for standard HTML forms? </p>  <p>Which framework would you recommend?</p>	"<p>I heartily suggest <a href=""http://www.djangoproject.com/"" rel=""nofollow noreferrer"">Django</a> + <a href=""http://www.prototypejs.org/"" rel=""nofollow noreferrer"">Prototype</a>.  I think they cover most of the bases you are looking at and they are very straight-forward to get started with.  Also you could use them on the GAE if that is the route you decide to take, although you should keep in mind that the GAE does not support Cron jobs, which can limit your functionality.</p>"
205204	Starting a new database driven python web application would you use a javascript widget framework? If so which framework?	javascript|python|frameworks	2008-10-15 15:37:16.373000 UTC	<p>I am starting a new web application project. I want to use python as I am using it at my bread-and-butter-job.</p>  <p>However I don't want to reinvent the wheel. Some things I have thought about:</p>  <ul> <li><p>AJAX would be nice if it’s not too much of a hazzle. </p></li> <li><p>It is best if the licensing allows commercialization but is not crucial at this point.</p></li> <li><p>It could also be funny to try out the Google App Engine if the tools will let me.</p></li> </ul>  <p>Should I be using a javascript UI framework or should I go for standard HTML forms? </p>  <p>Which framework would you recommend?</p>	"<p>Take a look at <a href=""http://extjs.com/"" rel=""nofollow noreferrer"">ExtJS</a>.  It's got the best widget library out there.  They offer a commercial license and an open-source license.  There are several python developers in the community and there is some integration with Google APIs.</p>"
205204	Starting a new database driven python web application would you use a javascript widget framework? If so which framework?	javascript|python|frameworks	2008-10-15 15:37:16.373000 UTC	<p>I am starting a new web application project. I want to use python as I am using it at my bread-and-butter-job.</p>  <p>However I don't want to reinvent the wheel. Some things I have thought about:</p>  <ul> <li><p>AJAX would be nice if it’s not too much of a hazzle. </p></li> <li><p>It is best if the licensing allows commercialization but is not crucial at this point.</p></li> <li><p>It could also be funny to try out the Google App Engine if the tools will let me.</p></li> </ul>  <p>Should I be using a javascript UI framework or should I go for standard HTML forms? </p>  <p>Which framework would you recommend?</p>	<p>web2py uses jQuery</p>
205204	Starting a new database driven python web application would you use a javascript widget framework? If so which framework?	javascript|python|frameworks	2008-10-15 15:37:16.373000 UTC	<p>I am starting a new web application project. I want to use python as I am using it at my bread-and-butter-job.</p>  <p>However I don't want to reinvent the wheel. Some things I have thought about:</p>  <ul> <li><p>AJAX would be nice if it’s not too much of a hazzle. </p></li> <li><p>It is best if the licensing allows commercialization but is not crucial at this point.</p></li> <li><p>It could also be funny to try out the Google App Engine if the tools will let me.</p></li> </ul>  <p>Should I be using a javascript UI framework or should I go for standard HTML forms? </p>  <p>Which framework would you recommend?</p>	"<p><a href=""http://www.jquery.com/"" rel=""nofollow noreferrer"">jQuery</a>? Though its <a href=""http://ui.jquery.com/"" rel=""nofollow noreferrer"">UI</a> components are perhaps not up to the very best (but lots of work appears to be done in that area), jQuery itself seems to be on track to become the de facto JS standard library. It is both MIT or GPL licensed so commercial use is ok (and costless).</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>As far as I know, Python classes use dictionaries to store their attributes anyway (that's hidden from the programmer), so it looks to me that what you've done there is effectively emulate a Python class... using a python class. </p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>The one major disadvantage of using something like your DictObj is you either have to limit allowable keys or you can't have methods on your DictObj such as <code>.keys()</code>, <code>.values()</code>, <code>.items()</code>, etc.</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>With regards to the <code>DictObj</code>, would the following work for you?  A blank class will allow you to arbitrarily add to or replace stuff in a container object.</p>  <pre><code>class Container(object):     pass  &gt;&gt;&gt; myContainer = Container() &gt;&gt;&gt; myContainer.spam = ""in a can"" &gt;&gt;&gt; myContainer.eggs = ""in a shell"" </code></pre>  <p>If you want to not throw an AttributeError when there is no attribute, what do you think about the following?  Personally, I'd prefer to use a dict for clarity, or to use a try/except clause.</p>  <pre><code>class QuietContainer(object):     def __getattr__(self, attribute):         try:             return object.__getattr__(self,attribute)         except AttributeError:             return None  &gt;&gt;&gt; cont = QuietContainer() &gt;&gt;&gt; print cont.me None </code></pre>  <p>Right?</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>Your DictObj example is actually quite common. Object-style dot-notation access can be a win if you are dealing with ‘things that resemble objects’, ie. they have fixed property names containing only characters valid in Python identifiers. Stuff like database rows or form submissions can be usefully stored in this kind of object, making code a little more readable without the excess of ['item access'].</p>  <p>The implementation is a bit limited - you don't get the nice constructor syntax of dict, len(), comparisons, 'in', iteration or nice reprs. You can of course implement those things yourself, but in the new-style-classes world you can get them for free by simply subclassing dict:</p>  <pre><code>class AttrDict(dict):     __getattr__ = dict.__getitem__     __setattr__ = dict.__setitem__     __delattr__ = dict.__delitem__ </code></pre>  <p>To get the default-to-None behaviour, simply subclass Python 2.5's collections.defaultdict class instead of dict.</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>It's not ""wrong"" to do this, and it can be nicer if your dictionaries have a strong possibility of turning into objects at some point, but be wary of the reasons for having bracket access in the first place:</p>  <ol> <li>Dot access can't use keywords as keys.</li> <li>Dot access has to use Python-identifier-valid characters in the keys.</li> <li>Dictionaries can hold any hashable element -- not just strings.</li> </ol>  <p>Also keep in mind you can always make your objects access like dictionaries if you decide to switch to objects later on.</p>  <p>For a case like this I would default to the ""readability counts"" mantra: presumably other Python programmers will be reading your code and they probably won't be expecting dictionary/object hybrids everywhere. If it's a good design decision for a particular situation, use it, but I wouldn't use it without necessity to do so.</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>If you're looking for an alternative that handles nested dicts: </p>  <p>Recursively transform a dict to instances of the desired class</p>  <pre><code>import json from collections import namedtuple   class DictTransformer():     @classmethod     def constantize(self, d):         return self.transform(d, klass=namedtuple, klassname='namedtuple')      @classmethod     def transform(self, d, klass, klassname):         return self._from_json(self._to_json(d), klass=klass, klassname=klassname)      @classmethod     def _to_json(self, d, access_method='__dict__'):         return json.dumps(d, default=lambda o: getattr(o, access_method, str(o)))      @classmethod     def _from_json(self, jsonstr, klass, klassname):         return json.loads(jsonstr, object_hook=lambda d: klass(klassname, d.keys())(*d.values())) </code></pre>  <p>Ex: </p>  <pre><code>constants = {   'A': {     'B': {       'C': 'D'     }   } } CONSTANTS = DictTransformer.transform(d, klass=namedtuple, klassname='namedtuple') CONSTANTS.A.B.C == 'D' </code></pre>  <p>Pros:</p>  <ul> <li>handles nested dicts</li> <li>can potentially generate other classes</li> <li>namedtuples provide immutability for constants</li> </ul>  <p>Cons:</p>  <ul> <li>may not respond to <code>.keys</code> and <code>.values</code> if those are not provided on your klass (though you can sometimes mimic with <code>._fields</code> and <code>list(A.B.C)</code>)</li> </ul>  <p>Thoughts?</p>  <p>h/t to @hlzr for the original class idea</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	<p>I like dot notation a lot better than dictionary fields personally.  The reason being that it makes autocompletion work a lot better.</p>
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>It's not bad if it serves your purpose. ""Practicality beats purity"".</p>  <p>I saw such approach elserwhere (eg. in <a href=""http://www.blueskyonmars.com/projects/paver/"" rel=""nofollow noreferrer"">Paver</a>), so this can be considered <em>common need</em> (or desire).</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>This is a simpler version of your DictObj class:</p>  <pre><code>class DictObj(object):     def __getattr__(self, attr):         return self.__dict__.get(attr)  &gt;&gt;&gt; d = DictObj() &gt;&gt;&gt; d.something = 'one' &gt;&gt;&gt; print d.something one &gt;&gt;&gt; print d.somethingelse None &gt;&gt;&gt;  </code></pre>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>Because you ask for undesirable side-effects:</p>  <p>A disadvantage is that in visual editors like eclipse+pyDev, you will see many undefined variable errors on lines using the dot notation. Pydef will not be able to find such runtime ""object"" definitions. Whereas in the case of a normal dictionary, it knows that you are just getting a dictionary entry.</p>  <p>You would need to 1) ignore those errors and live with red crosses; 2) suppress those warnings on a line by line basis using #@UndefinedVariable or 3) disable undefined variable error entirely, causing you to miss real undefined variable definitions.</p>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>There's a symmetry between <a href=""https://stackoverflow.com/a/224876/1413374"">this</a> and <a href=""https://stackoverflow.com/a/224080/1413374"">this</a> answer:</p>  <pre><code>class dotdict(dict):     __getattr__= dict.__getitem__     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__ </code></pre>  <p>The same interface, just implemented the other way round...</p>  <pre><code>class container(object):     __getitem__ = object.__getattribute__     __setitem__ = object.__setattr__     __delitem__ = object.__delattr__ </code></pre>"
224026	Javascript style dot notation for dictionary keys unpythonic?	python|coding-style	2008-10-22 00:08:01.410000 UTC	"<p>I've started to use constructs like these:</p>  <pre><code>class DictObj(object):     def __init__(self):         self.d = {}     def __getattr__(self, m):         return self.d.get(m, None)     def __setattr__(self, m, v):         super.__setattr__(self, m, v) </code></pre>  <p>Update: based on this thread, I've revised the DictObj implementation to:</p>  <pre><code>class dotdict(dict):     def __getattr__(self, attr):         return self.get(attr, None)     __setattr__= dict.__setitem__     __delattr__= dict.__delitem__  class AutoEnum(object):     def __init__(self):         self.counter = 0         self.d = {}     def __getattr__(self, c):         if c not in self.d:             self.d[c] = self.counter             self.counter += 1                 return self.d[c] </code></pre>  <p>where DictObj is a dictionary that can be accessed via dot notation:</p>  <pre><code>d = DictObj() d.something = 'one' </code></pre>  <p>I find it more aesthetically pleasing than <code>d['something']</code>. Note that accessing an undefined key returns None instead of raising an exception, which is also nice.</p>  <p>Update: Smashery makes a good point, which mhawke expands on for an easier solution. I'm wondering if there are any undesirable side effects of using <strong>dict</strong> instead of defining a new dictionary; if not, I like mhawke's solution a lot.</p>  <p>AutoEnum is an auto-incrementing Enum, used like this:</p>  <pre><code>CMD = AutoEnum()  cmds = {     ""peek"":  CMD.PEEK,     ""look"":  CMD.PEEK,     ""help"":  CMD.HELP,     ""poke"":  CMD.POKE,     ""modify"": CMD.POKE, } </code></pre>  <p>Both are working well for me, but I'm feeling unpythonic about them. </p>  <p>Are these in fact bad constructs?</p>"	"<p>Don't overlook <a href=""https://pypi.python.org/pypi/bunch/1.0.1"" rel=""nofollow"" title=""Bunch"">Bunch</a>.  </p>  <p>It is a child of dictionary and can import YAML or JSON, or convert any existing dictionary to a Bunch and vice-versa. Once ""bunchify""'d, a dictionary gains dot notations without losing any other dictionary methods.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>I ended up finding java code from IBM that solved it: <a href=""http://www.ibm.com/developerworks/java/library/j-coordconvert/index.html"" rel=""noreferrer"">http://www.ibm.com/developerworks/java/library/j-coordconvert/index.html</a></p>  <p>Just for reference, here is my python implementation of the method I needed:</p>  <pre><code>import math  def utmToLatLng(zone, easting, northing, northernHemisphere=True):     if not northernHemisphere:         northing = 10000000 - northing      a = 6378137     e = 0.081819191     e1sq = 0.006739497     k0 = 0.9996      arc = northing / k0     mu = arc / (a * (1 - math.pow(e, 2) / 4.0 - 3 * math.pow(e, 4) / 64.0 - 5 * math.pow(e, 6) / 256.0))      ei = (1 - math.pow((1 - e * e), (1 / 2.0))) / (1 + math.pow((1 - e * e), (1 / 2.0)))      ca = 3 * ei / 2 - 27 * math.pow(ei, 3) / 32.0      cb = 21 * math.pow(ei, 2) / 16 - 55 * math.pow(ei, 4) / 32     cc = 151 * math.pow(ei, 3) / 96     cd = 1097 * math.pow(ei, 4) / 512     phi1 = mu + ca * math.sin(2 * mu) + cb * math.sin(4 * mu) + cc * math.sin(6 * mu) + cd * math.sin(8 * mu)      n0 = a / math.pow((1 - math.pow((e * math.sin(phi1)), 2)), (1 / 2.0))      r0 = a * (1 - e * e) / math.pow((1 - math.pow((e * math.sin(phi1)), 2)), (3 / 2.0))     fact1 = n0 * math.tan(phi1) / r0      _a1 = 500000 - easting     dd0 = _a1 / (n0 * k0)     fact2 = dd0 * dd0 / 2      t0 = math.pow(math.tan(phi1), 2)     Q0 = e1sq * math.pow(math.cos(phi1), 2)     fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * math.pow(dd0, 4) / 24      fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * math.pow(dd0, 6) / 720      lof1 = _a1 / (n0 * k0)     lof2 = (1 + 2 * t0 + Q0) * math.pow(dd0, 3) / 6.0     lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * math.pow(Q0, 2) + 8 * e1sq + 24 * math.pow(t0, 2)) * math.pow(dd0, 5) / 120     _a2 = (lof1 - lof2 + lof3) / math.cos(phi1)     _a3 = _a2 * 180 / math.pi      latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / math.pi      if not northernHemisphere:         latitude = -latitude      longitude = ((zone &gt; 0) and (6 * zone - 183.0) or 3.0) - _a3      return (latitude, longitude) </code></pre>  <p>And here I thought it was something simple like <code>easting*x+zone*y</code> or something.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>What I found is the following site: <a href=""http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html"" rel=""nofollow noreferrer"">http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html</a> It has a javascript converter, you should check the algorithm there. From the page:</p>  <blockquote>   <p>Programmers: The JavaScript source code in this document may be copied and reused without restriction.</p> </blockquote>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>According to this page, UTM is supported by proj4js.</p>  <p><a href=""http://trac.osgeo.org/proj4js/wiki/UserGuide#Supportedprojectionclasses"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/wiki/UserGuide#Supportedprojectionclasses</a></p>  <p>You may also want to take a look at <a href=""http://gdal.org"" rel=""noreferrer"">GDAL</a>.  The gdal library has excellent python support, though it may be a bit overkill if you're only doing projection conversion.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>The answer by Staale worked for me with a small modification - The math module cannot handle Pandas Series, so I replaced all math functions with numpy.</p>  <p>However, checking in QGIS, I see about 4m difference between the UTM and LAT/LON coordinates.</p>  <p>Code below:</p>  <pre><code>import numpy as np  def utmToLatLng(zone, easting, northing, northernHemisphere=True):     if not northernHemisphere:         northing = 10000000 - northing  a = 6378137 e = 0.081819191 e1sq = 0.006739497 k0 = 0.9996  arc = northing / k0 mu = arc / (a * (1 - np.power(e, 2) / 4.0 - 3 * np.power(e, 4) / 64.0 - 5 * np.power(e, 6) / 256.0))  ei = (1 - np.power((1 - e * e), (1 / 2.0))) / (1 + np.power((1 - e * e), (1 / 2.0)))  ca = 3 * ei / 2 - 27 * np.power(ei, 3) / 32.0  cb = 21 * np.power(ei, 2) / 16 - 55 * np.power(ei, 4) / 32 cc = 151 * np.power(ei, 3) / 96 cd = 1097 * np.power(ei, 4) / 512 phi1 = mu + ca * np.sin(2 * mu) + cb * np.sin(4 * mu) + cc * np.sin(6 * mu) + cd * np.sin(8 * mu)  n0 = a / np.power((1 - np.power((e * np.sin(phi1)), 2)), (1 / 2.0))  r0 = a * (1 - e * e) / np.power((1 - np.power((e * np.sin(phi1)), 2)), (3 / 2.0)) fact1 = n0 * np.tan(phi1) / r0  _a1 = 500000 - easting dd0 = _a1 / (n0 * k0) fact2 = dd0 * dd0 / 2  t0 = np.power(np.tan(phi1), 2) Q0 = e1sq * np.power(np.cos(phi1), 2) fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * np.power(dd0, 4) / 24  fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * np.power(dd0, 6) / 720  lof1 = _a1 / (n0 * k0) lof2 = (1 + 2 * t0 + Q0) * np.power(dd0, 3) / 6.0 lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * np.power(Q0, 2) + 8 * e1sq + 24 * np.power(t0, 2)) * np.power(dd0, 5) / 120 _a2 = (lof1 - lof2 + lof3) / np.cos(phi1) _a3 = _a2 * 180 / np.pi  latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / np.pi  if not northernHemisphere:     latitude = -latitude  longitude = ((zone &gt; 0) and (6 * zone - 183.0) or 3.0) - _a3  return (latitude, longitude) </code></pre>  <p>That way I can do this directly:</p>  <pre><code>df['LAT'], df['LON']=utmToLatLng(31, df['X'], df['Y'], northernHemisphere=True) </code></pre>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>Converted @TreyA to kotlin (some Math functions in java libraries), just for the case of it. Seems to be a bit more accurate than @Staale and @sandino</p> <pre><code> fun utmToLatLng2(     north:Double?,     east:Double?,     zone:Long,     northernHemisphere: Boolean ):LatLng?{      if((north==null)||(east == null)) return null      val lngOrigin = Math.toRadians(zone*6.0 - 183.0)     val falseNorth = if(northernHemisphere) 0.toDouble() else 10000000.toDouble()      val ecc = 0.081819190842622     val eccSq = ecc*ecc     val ecc2Sq = eccSq / (1.0 - eccSq)     //var ecc2 = sqrt(ecc2Sq) //not in use ?     val e1 = (1.0 - sqrt(1.0-eccSq))/(1.0 + sqrt(1-eccSq))     val e12 = e1*e1     val e13 = e12*e1     val e14 = e13*e1      val semiMajor = 6378137.0     val falseEast = 500000.0     val scaleFactor = 0.9996      //Cassini      val m1 = (north - falseNorth) / scaleFactor     val mu1 = m1 / (semiMajor * (1.0 - eccSq/4.0 - 3.0*eccSq*eccSq/64.0 - 5.0*eccSq*eccSq*eccSq/256.0))      val phi1 = mu1 +             (3.0 * e1 / 2.0 - 27.0 * e13 / 32.0) * sin(2.0 * mu1) +             (21.0 * e12 / 16.0 - 55.0 * e14 / 32.0) * sin(4.0 * mu1) +             (151.0 * e13 / 96.0) * sin(6.0 * mu1) +             (1097.0 * e14 / 512.0) * sin( 8.0 * mu1)      val sin2phi1 = sin(phi1) * sin(phi1)     val rho1 = (semiMajor * (1.0-eccSq)) / (1.0 - eccSq * sin2phi1).pow(1.5)     val nu1 = semiMajor / sqrt(1.0-eccSq*sin2phi1)      //POSC      val t1 = tan(phi1)*tan(phi1)     val t12 = t1*t1     val c1 = ecc2Sq*cos(phi1)*cos(phi1)     val c12 = c1*c1     val d = (east - falseEast) / (scaleFactor*nu1)     val d2 = d*d     val d3 = d2*d     val d4 = d3*d     val d5 = d4*d     val d6 = d5*d      //Compute lat &amp; lon convert to degree      var lat =         phi1 - nu1 * tan(phi1)/rho1 *                 (d2/2.0 - (5.0 + 3.0*t1 + 10*c1 - 4.0*c12 -9.0*ecc2Sq) * d4/24.0 +                         (61.0 + 90.0*t1 +298.0*c1 + 45.0*t12 -252*ecc2Sq - 3.0*c12) * d6/720.0)      lat = Math.toDegrees(lat)      var lon =         lngOrigin +                 (d - (1.0 + 2.0*t1 + c1)*d3/6.0 +                         (5.0 - 2.0*c1 + 28.0*t1 - 3.0*c12 + 8.0*ecc2Sq + 24.0*t12)*d5/120.0) / cos(phi1)      lon = Math.toDegrees(lon)      return LatLng(lat,lon)   }    </code></pre>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>In <strong>Python</strong>, you can also use the <strong><a href=""https://pyproj4.github.io/pyproj/stable/installation.html"" rel=""nofollow noreferrer"">pyproj</a></strong> package. Find the EPSG code of your UTM (e.g., <a href=""https://epsg.io/"" rel=""nofollow noreferrer"">here</a>). Then:</p> <p>From <strong>lat-lon</strong> to <strong>UTM</strong>:</p> <pre><code>from pyproj import Transformer, CRS crs = CRS.from_epsg(25833)  # put your desired EPSG code here latlon2utm = Transformer.from_crs(crs.geodetic_crs, crs) lats = [58.969, 59.911]  # latitudes of two Norwegian cities lons = [5.732, 10.750]  # longitudes of two Norwegian cities eastings, northings = latlon2utm.transform(lats, lons) </code></pre> <p>From <strong>UTM</strong> to <strong>lat-lon</strong>:</p> <pre><code>utm2latlon = Transformer.from_crs(crs, crs.geodetic_crs) latitudes, longitudes = utm2latlon.transform(eastings, northings) </code></pre>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>There is a perl module via CPAN called Geography::NationalGrid which can convert easting/northing to lat/longs. That may help.</p>  <p>Alternatively there are lots of scripts on the <a href=""http://www.movable-type.co.uk/scripts/latlong-gridref.html"" rel=""nofollow noreferrer"">movable-type site</a> that let you convert lat/long and easting/northings.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<pre class=""lang-js prettyprint-override""><code>//////////////////////////////////////////////////////////////////////////////////////////// // // ToLL - function to compute Latitude and Longitude given UTM Northing and Easting in meters // //  Description: //    This member function converts input north and east coordinates //    to the corresponding Northing and Easting values relative to the defined //    UTM zone.  Refer to the reference in this file's header. // //  Parameters: //    north   - (i) Northing (meters) //    east    - (i) Easting (meters) //    utmZone - (i) UTM Zone of the North and East parameters //    lat     - (o) Latitude in degrees  //    lon     - (o) Longitude in degrees // function ToLL(north,east,utmZone) {    // This is the lambda knot value in the reference   var LngOrigin = DegToRad(utmZone * 6 - 183)    // The following set of class constants define characteristics of the   // ellipsoid, as defined my the WGS84 datum.  These values need to be   // changed if a different dataum is used.        var FalseNorth = 0.  // South or North?   //if (lat &lt; 0.) FalseNorth = 10000000.  // South or North?   //else          FalseNorth = 0.       var Ecc = 0.081819190842622       // Eccentricity   var EccSq = Ecc * Ecc   var Ecc2Sq = EccSq / (1. - EccSq)   var Ecc2 = Math.sqrt(Ecc2Sq)      // Secondary eccentricity   var E1 = ( 1 - Math.sqrt(1-EccSq) ) / ( 1 + Math.sqrt(1-EccSq) )   var E12 = E1 * E1   var E13 = E12 * E1   var E14 = E13 * E1    var SemiMajor = 6378137.0         // Ellipsoidal semi-major axis (Meters)   var FalseEast = 500000.0          // UTM East bias (Meters)   var ScaleFactor = 0.9996          // Scale at natural origin    // Calculate the Cassini projection parameters    var M1 = (north - FalseNorth) / ScaleFactor   var Mu1 = M1 / ( SemiMajor * (1 - EccSq/4.0 - 3.0*EccSq*EccSq/64.0 -     5.0*EccSq*EccSq*EccSq/256.0) )    var Phi1 = Mu1 + (3.0*E1/2.0 - 27.0*E13/32.0) * Math.sin(2.0*Mu1)     + (21.0*E12/16.0 - 55.0*E14/32.0)           * Math.sin(4.0*Mu1)     + (151.0*E13/96.0)                          * Math.sin(6.0*Mu1)     + (1097.0*E14/512.0)                        * Math.sin(8.0*Mu1)    var sin2phi1 = Math.sin(Phi1) * Math.sin(Phi1)   var Rho1 = (SemiMajor * (1.0-EccSq) ) / Math.pow(1.0-EccSq*sin2phi1,1.5)   var Nu1 = SemiMajor / Math.sqrt(1.0-EccSq*sin2phi1)    // Compute parameters as defined in the POSC specification.  T, C and D    var T1 = Math.tan(Phi1) * Math.tan(Phi1)   var T12 = T1 * T1   var C1 = Ecc2Sq * Math.cos(Phi1) * Math.cos(Phi1)   var C12 = C1 * C1   var D  = (east - FalseEast) / (ScaleFactor * Nu1)   var D2 = D * D   var D3 = D2 * D   var D4 = D3 * D   var D5 = D4 * D   var D6 = D5 * D    // Compute the Latitude and Longitude and convert to degrees   var lat = Phi1 - Nu1*Math.tan(Phi1)/Rho1 *     ( D2/2.0 - (5.0 + 3.0*T1 + 10.0*C1 - 4.0*C12 - 9.0*Ecc2Sq)*D4/24.0      + (61.0 + 90.0*T1 + 298.0*C1 + 45.0*T12 - 252.0*Ecc2Sq - 3.0*C12)*D6/720.0 )    lat = RadToDeg(lat)    var lon = LngOrigin +      ( D - (1.0 + 2.0*T1 + C1)*D3/6.0       + (5.0 - 2.0*C1 + 28.0*T1 - 3.0*C12 + 8.0*Ecc2Sq + 24.0*T12)*D5/120.0) / Math.cos(Phi1)    lon = RadToDeg(lon)    // Create a object to store the calculated Latitude and Longitude values   var sendLatLon = new PC_LatLon(lat,lon)    // Returns a PC_LatLon object   return sendLatLon }  //////////////////////////////////////////////////////////////////////////////////////////// // //  RadToDeg - function that inputs a value in radians and returns a value in degrees // function RadToDeg(value) {   return ( value * 180.0 / Math.PI ) }  //////////////////////////////////////////////////////////////////////////////////////////// // // PC_LatLon - this psuedo class is used to store lat/lon values computed by the ToLL  //  function. // function PC_LatLon(inLat,inLon) {   this.lat       = inLat     // Store Latitude in decimal degrees   this.lon       = inLon     // Store Longitude in decimal degrees } </code></pre>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>One problem I had with using proj4js was that it needed the exact zone as @Richard points out. I found a great resource <a href=""http://home.hiwaay.net/~taylorc/toolbox/geography/geoutm.html"" rel=""nofollow"">here</a> which can convert WGS to UTM and wrote a cleaner wrapper in JavaScript:</p>  <p><a href=""https://github.com/urbanetic/utm-converter"" rel=""nofollow"">https://github.com/urbanetic/utm-converter</a></p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>A Javascript version of Staale answer</p>  <pre><code>function utmToLatLng(zone, easting, northing, northernHemisphere){         if (!northernHemisphere){             northing = 10000000 - northing;         }          var a = 6378137;         var e = 0.081819191;         var e1sq = 0.006739497;         var k0 = 0.9996;          var arc = northing / k0;         var mu = arc / (a * (1 - Math.pow(e, 2) / 4.0 - 3 * Math.pow(e, 4) / 64.0 - 5 * Math.pow(e, 6) / 256.0));          var ei = (1 - Math.pow((1 - e * e), (1 / 2.0))) / (1 + Math.pow((1 - e * e), (1 / 2.0)));          var ca = 3 * ei / 2 - 27 * Math.pow(ei, 3) / 32.0;          var cb = 21 * Math.pow(ei, 2) / 16 - 55 * Math.pow(ei, 4) / 32;         var cc = 151 * Math.pow(ei, 3) / 96;         var cd = 1097 * Math.pow(ei, 4) / 512;         var phi1 = mu + ca * Math.sin(2 * mu) + cb * Math.sin(4 * mu) + cc * Math.sin(6 * mu) + cd * Math.sin(8 * mu);          var n0 = a / Math.pow((1 - Math.pow((e * Math.sin(phi1)), 2)), (1 / 2.0));          var r0 = a * (1 - e * e) / Math.pow((1 - Math.pow((e * Math.sin(phi1)), 2)), (3 / 2.0));         var fact1 = n0 * Math.tan(phi1) / r0;          var _a1 = 500000 - easting;         var dd0 = _a1 / (n0 * k0);         var fact2 = dd0 * dd0 / 2;          var t0 = Math.pow(Math.tan(phi1), 2);         var Q0 = e1sq * Math.pow(Math.cos(phi1), 2);         var fact3 = (5 + 3 * t0 + 10 * Q0 - 4 * Q0 * Q0 - 9 * e1sq) * Math.pow(dd0, 4) / 24;          var fact4 = (61 + 90 * t0 + 298 * Q0 + 45 * t0 * t0 - 252 * e1sq - 3 * Q0 * Q0) * Math.pow(dd0, 6) / 720;          var lof1 = _a1 / (n0 * k0);         var lof2 = (1 + 2 * t0 + Q0) * Math.pow(dd0, 3) / 6.0;         var lof3 = (5 - 2 * Q0 + 28 * t0 - 3 * Math.pow(Q0, 2) + 8 * e1sq + 24 * Math.pow(t0, 2)) * Math.pow(dd0, 5) / 120;         var _a2 = (lof1 - lof2 + lof3) / Math.cos(phi1);         var _a3 = _a2 * 180 / Math.PI;          var latitude = 180 * (phi1 - fact1 * (fact2 + fact3 + fact4)) / Math.PI;          if (!northernHemisphere){           latitude = -latitude;         }          var longitude = ((zone &gt; 0) &amp;&amp; (6 * zone - 183.0) || 3.0) - _a3;          var obj = {               latitude : latitude,               longitude: longitude         };           return obj;       } </code></pre>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>There is a library for Python (<a href=""https://github.com/Turbo87/utm"" rel=""nofollow noreferrer"">utm</a>) &quot;Bidirectional UTM-WGS84 converter for python&quot; that can manage single coordinate points or series.</p> <p>Convert a (latitude, longitude) tuple into an UTM coordinate:</p> <pre><code>&gt;&gt;&gt; utm.from_latlon(51.2, 7.5) </code></pre> <p>resulting</p> <pre><code>(395201.3103811303, 5673135.241182375, 32, 'U') </code></pre> <p>The return has the form <code>(EASTING, NORTHING, ZONE_NUMBER, ZONE_LETTER)</code>.</p> <p>If series are used, in the result EASTING and NORTHING will have the same shape.</p> <pre><code>&gt;&gt;&gt; utm.from_latlon(np.array([51.2, 49.0]), np.array([7.5, 8.4])) </code></pre> <p>resulting</p> <pre><code>(array([395201.31038113, 456114.59586214]), array([5673135.24118237, 5427629.20426126]), 32, 'U') </code></pre> <p>And for the opposite, convert an UTM coordinate into a (latitude, longitude) tuple:</p> <pre><code>&gt;&gt;&gt; utm.to_latlon(340000, 5710000, 32, 'U') </code></pre> <pre><code>(51.51852098408468, 6.693872395145327) </code></pre> <p>with the syntax <code>utm.to_latlon(EASTING, NORTHING, ZONE_NUMBER, ZONE_LETTER)</code>. Same in this case if series are to be used. According to the documentation is faster to pass a series than multiple one point calls to the function.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>You could use Proj4js, as follows.</p>  <p>Download Proj4JS from GitHub, using <a href=""https://github.com/proj4js/proj4js"" rel=""nofollow"">this</a> link.</p>  <p>The following code will convert from UTM to longitude latitude</p>  <pre><code>&lt;html&gt; &lt;head&gt;   &lt;script src=""proj4.js""&gt;&lt;/script&gt;    &lt;script&gt;     var utm = ""+proj=utm +zone=32"";     var wgs84 = ""+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"";     console.log(proj4(utm,wgs84,[539884, 4942158]));   &lt;/script&gt; &lt;/head&gt; &lt;body&gt;  &lt;/body&gt; &lt;/html&gt; </code></pre>  <p>In this code, the UTM zone is 32, as should be obvious. The Easting is 539884, and the Northing is 4942158. The result is:</p>  <pre><code>[9.502832656648073, 44.631671014204365]  </code></pre>  <p>Which is to say 44.631671014204365N, 9.502832656648073E. Which I have <a href=""http://www.rcn.montana.edu/resources/tools/coordinates.aspx?nav=11&amp;c=UTM&amp;md=83&amp;mdt=NAD83/WGS84&amp;z=32&amp;e=539884&amp;n=4942158&amp;h=N"" rel=""nofollow"">verified</a> is correct.</p>  <p>If you need other projections, you can find their strings <a href=""http://spatialreference.org/ref/epsg/4326/"" rel=""nofollow"">here</a>.</p>"
343865	How to convert from UTM to LatLng in python or Javascript	javascript|python|gis|arcgis-js-api|proj4js	2008-12-05 13:42:34.977000 UTC	"<p>I have a bunch of files with coordinates in UTM form. For each coordinate I have easting, northing and zone. I need to convert this to LatLng for use with Google Map API to show the information in a map.</p>  <p>I have found some online calculators that does this, but no actual code or libraries. <a href=""http://trac.osgeo.org/proj4js/"" rel=""noreferrer"">http://trac.osgeo.org/proj4js/</a> is a projection library for Javascript, but looking at the demo it doesn't include UTM projection.</p>  <p>I am still pretty fresh to the entire GIS domain, so what I want is something ala:</p>  <pre><code>(lat,lng) = transform(easting, northing, zone) </code></pre>"	"<p>I'm new to this as well and have been studying up on the subject recently.</p>  <p>Here's a method I found using the python <a href=""http://pypi.python.org/pypi/GDAL"" rel=""noreferrer"">gdal</a> pacakge (the <em>osr</em> package is included in gdal).  The gdal package is pretty powerful, but the documentation could be better.  </p>  <p>This is derived from a discussion here: <a href=""http://www.mail-archive.com/gdal-dev@lists.osgeo.org/msg12398.html"" rel=""noreferrer"">http://www.mail-archive.com/gdal-dev@lists.osgeo.org/msg12398.html</a></p>  <pre><code>import osr  def transform_utm_to_wgs84(easting, northing, zone):     utm_coordinate_system = osr.SpatialReference()     utm_coordinate_system.SetWellKnownGeogCS(""WGS84"") # Set geographic coordinate system to handle lat/lon     is_northern = northing &gt; 0         utm_coordinate_system.SetUTM(zone, is_northern)      wgs84_coordinate_system = utm_coordinate_system.CloneGeogCS() # Clone ONLY the geographic coordinate system       # create transform component     utm_to_wgs84_transform = osr.CoordinateTransformation(utm_coordinate_system, wgs84_coordinate_system) # (&lt;from&gt;, &lt;to&gt;)     return utm_to_wgs84_transform.TransformPoint(easting, northing, 0) # returns lon, lat, altitude </code></pre>  <p>And here's the method for converting from a lat, lon in wgs84 (what most gps units report) to utm:</p>  <pre><code>def transform_wgs84_to_utm(lon, lat):         def get_utm_zone(longitude):         return (int(1+(longitude+180.0)/6.0))      def is_northern(latitude):         """"""         Determines if given latitude is a northern for UTM         """"""         if (latitude &lt; 0.0):             return 0         else:             return 1      utm_coordinate_system = osr.SpatialReference()     utm_coordinate_system.SetWellKnownGeogCS(""WGS84"") # Set geographic coordinate system to handle lat/lon       utm_coordinate_system.SetUTM(get_utm_zone(lon), is_northern(lat))      wgs84_coordinate_system = utm_coordinate_system.CloneGeogCS() # Clone ONLY the geographic coordinate system       # create transform component     wgs84_to_utm_transform = osr.CoordinateTransformation(wgs84_coordinate_system, utm_coordinate_system) # (&lt;from&gt;, &lt;to&gt;)     return wgs84_to_utm_transform.TransformPoint(lon, lat, 0) # returns easting, northing, altitude     </code></pre>  <p>I also found that if you've already got django/gdal installed and you know the <a href=""http://reference.mapinfo.com/common/docs/mapxtend-dev-web-none-eng/miaware/doc/guide/xmlapi/coordsys/systems.htm"" rel=""noreferrer"">EPSG</a> code for the UTM zone you're working on, you can just use the <code>Point()</code>  <em>transform()</em> method.</p>  <pre><code>from django.contrib.gis.geos import Point utm2epsg = {""54N"": 3185, ...} p = Point(lon, lat, srid=4326) # 4326 = WGS84 epsg code p.transform(utm2epsg[""54N""]) </code></pre>"
390992	JavaScript parser in Python	javascript|python|parsing|compiler-construction	2008-12-24 07:56:36.143000 UTC	"<p>There is a JavaScript parser at least in C and Java (Mozilla), in JavaScript (Mozilla again) and Ruby. Is there any currently out there for Python?</p>  <p>I don't need a JavaScript interpreter, per se, just a parser that's up to ECMA-262 standards.</p>  <p>A quick google search revealed no immediate answers, so I'm asking the SO community.</p>"	"<blockquote> <p><a href=""http://www.antlr.org/"" rel=""nofollow noreferrer"">ANTLR</a>, ANother Tool for Language Recognition, is a language tool that provides a framework for constructing recognizers, interpreters, compilers, and translators from grammatical descriptions containing actions in a variety of target languages.</p> </blockquote> <p>The ANTLR site provides <a href=""https://github.com/antlr/grammars-v4"" rel=""nofollow noreferrer"">many grammars</a>, including <a href=""https://github.com/antlr/grammars-v4/tree/master/javascript"" rel=""nofollow noreferrer"">one for JavaScript</a>.</p> <p>As it happens, there is a <a href=""https://github.com/antlr/antlr4/blob/master/doc/python-target.md"" rel=""nofollow noreferrer"">Python API</a> available - so you can call the lexer (recognizer) generated from the grammar directly from Python (good luck).</p>"
390992	JavaScript parser in Python	javascript|python|parsing|compiler-construction	2008-12-24 07:56:36.143000 UTC	"<p>There is a JavaScript parser at least in C and Java (Mozilla), in JavaScript (Mozilla again) and Ruby. Is there any currently out there for Python?</p>  <p>I don't need a JavaScript interpreter, per se, just a parser that's up to ECMA-262 standards.</p>  <p>A quick google search revealed no immediate answers, so I'm asking the SO community.</p>"	"<p>You can try <a href=""http://wwwsearch.sourceforge.net/python-spidermonkey/"" rel=""nofollow noreferrer"">python-spidermonkey</a> It is a wrapper over <a href=""http://www.mozilla.org/js/spidermonkey/"" rel=""nofollow noreferrer"">spidermonkey</a> which is codename for Mozilla's C implementation of javascript.</p>"
390992	JavaScript parser in Python	javascript|python|parsing|compiler-construction	2008-12-24 07:56:36.143000 UTC	"<p>There is a JavaScript parser at least in C and Java (Mozilla), in JavaScript (Mozilla again) and Ruby. Is there any currently out there for Python?</p>  <p>I don't need a JavaScript interpreter, per se, just a parser that's up to ECMA-262 standards.</p>  <p>A quick google search revealed no immediate answers, so I'm asking the SO community.</p>"	"<p>I have translated <a href=""https://github.com/jquery/esprima"" rel=""nofollow noreferrer"">esprima.js</a> to Python:</p> <p><a href=""https://github.com/PiotrDabkowski/pyjsparser"" rel=""nofollow noreferrer"">https://github.com/PiotrDabkowski/pyjsparser</a></p> <pre class=""lang-py prettyprint-override""><code>&gt;&gt;&gt; from pyjsparser import parse &gt;&gt;&gt; parse('var $ = &quot;Hello!&quot;') { &quot;type&quot;: &quot;Program&quot;, &quot;body&quot;: [     {         &quot;type&quot;: &quot;VariableDeclaration&quot;,         &quot;declarations&quot;: [             {                 &quot;type&quot;: &quot;VariableDeclarator&quot;,                 &quot;id&quot;: {                     &quot;type&quot;: &quot;Identifier&quot;,                     &quot;name&quot;: &quot;$&quot;                 },                 &quot;init&quot;: {                     &quot;type&quot;: &quot;Literal&quot;,                     &quot;value&quot;: &quot;Hello!&quot;,                     &quot;raw&quot;: '&quot;Hello!&quot;'                 }             }         ],         &quot;kind&quot;: &quot;var&quot;     }   ] } </code></pre> <p>It's a manual translation so its very fast, takes about 1 second to parse <code>angular.js</code> file (so 100k characters per second). It supports whole ECMAScript 5.1 and parts of version 6 - for example Arrow functions, <code>const</code>, <code>let</code>.</p> <p>If you need support for all the newest JS6 features you can translate esprima on the fly with <a href=""https://github.com/PiotrDabkowski/Js2Py"" rel=""nofollow noreferrer"">Js2Py</a>:</p> <pre><code>import js2py esprima = js2py.require(&quot;esprima@4.0.1&quot;) esprima.parse(&quot;a = () =&gt; {return 11};&quot;) # {'body': [{'expression': {'left': {'name': 'a', 'type': 'Identifier'}, 'operator': '=', 'right': {'async': False, 'body': {'body': [{'argument': {'raw': '11', 'type': 'Literal', 'value': 11}, 'type': 'ReturnStatement'}], 'type': 'BlockStatement'}, 'expression': False, 'generator': False, 'id': None, 'params': [], 'type': 'ArrowFunctionExpression'}, 'type': 'AssignmentExpression'}, 'type': 'ExpressionStatement'}], 'sourceType': 'script', 'type': 'Program'} </code></pre>"
390992	JavaScript parser in Python	javascript|python|parsing|compiler-construction	2008-12-24 07:56:36.143000 UTC	"<p>There is a JavaScript parser at least in C and Java (Mozilla), in JavaScript (Mozilla again) and Ruby. Is there any currently out there for Python?</p>  <p>I don't need a JavaScript interpreter, per se, just a parser that's up to ECMA-262 standards.</p>  <p>A quick google search revealed no immediate answers, so I'm asking the SO community.</p>"	"<p>Nowadays, there is at least one better tool, called <a href=""https://pypi.python.org/pypi/slimit"" rel=""noreferrer""><code>slimit</code></a>:</p>  <blockquote>   <p>SlimIt is a JavaScript minifier written in Python. It compiles   JavaScript into more compact code so that it downloads and runs   faster.</p>      <p>SlimIt also provides a library that includes a JavaScript parser,   lexer, pretty printer and a tree visitor.</p> </blockquote>  <p>Demo:</p>  <p>Imagine we have the following javascript code:</p>  <pre><code>$.ajax({     type: ""POST"",     url: 'http://www.example.com',     data: {         email: 'abc@g.com',         phone: '9999999999',         name: 'XYZ'     } }); </code></pre>  <p>And now we need to get <code>email</code>, <code>phone</code> and <code>name</code> values from the <code>data</code> object.</p>  <p>The idea here would be to instantiate a <code>slimit</code> parser, visit all nodes, filter all assignments and put them into the dictionary:</p>  <pre><code>from slimit import ast from slimit.parser import Parser from slimit.visitors import nodevisitor   data = """""" $.ajax({     type: ""POST"",     url: 'http://www.example.com',     data: {         email: 'abc@g.com',         phone: '9999999999',         name: 'XYZ'     } }); """"""  parser = Parser() tree = parser.parse(data) fields = {getattr(node.left, 'value', ''): getattr(node.right, 'value', '')           for node in nodevisitor.visit(tree)           if isinstance(node, ast.Assign)}  print fields </code></pre>  <p>It prints:</p>  <pre><code>{'name': ""'XYZ'"",   'url': ""'http://www.example.com'"",   'type': '""POST""',   'phone': ""'9999999999'"",   'data': '',   'email': ""'abc@g.com'""} </code></pre>"
390992	JavaScript parser in Python	javascript|python|parsing|compiler-construction	2008-12-24 07:56:36.143000 UTC	"<p>There is a JavaScript parser at least in C and Java (Mozilla), in JavaScript (Mozilla again) and Ruby. Is there any currently out there for Python?</p>  <p>I don't need a JavaScript interpreter, per se, just a parser that's up to ECMA-262 standards.</p>  <p>A quick google search revealed no immediate answers, so I'm asking the SO community.</p>"	"<p>As pib mentioned, <a href=""http://code.google.com/p/pynarcissus/"" rel=""noreferrer"">pynarcissus</a> is a Javascript tokenizer written in Python.  It seems to have some rough edges but so far has been working well for what I want to accomplish.</p>  <p>Updated: Took another crack at pynarcissus and below is a working direction for using PyNarcissus in a visitor pattern like system.  Unfortunately my current client bought the next iteration of my experiments and have decided not to make it public source.  A cleaner version of the code below is on gist <a href=""https://gist.github.com/1598830/495dc623541ffe3f5a95d6822b9b42cab09def1b"" rel=""noreferrer"">here</a></p>  <pre><code>from pynarcissus import jsparser from collections import defaultdict  class Visitor(object):      CHILD_ATTRS = ['thenPart', 'elsePart', 'expression', 'body', 'initializer']  def __init__(self, filepath):     self.filepath = filepath     #List of functions by line # and set of names     self.functions = defaultdict(set)     with open(filepath) as myFile:         self.source = myFile.read()      self.root = jsparser.parse(self.source, self.filepath)     self.visit(self.root)   def look4Childen(self, node):     for attr in self.CHILD_ATTRS:         child = getattr(node, attr, None)         if child:             self.visit(child)  def visit_NOOP(self, node):     pass  def visit_FUNCTION(self, node):     # Named functions     if node.type == ""FUNCTION"" and getattr(node, ""name"", None):         print str(node.lineno) + "" | function "" + node.name + "" | "" + self.source[node.start:node.end]   def visit_IDENTIFIER(self, node):     # Anonymous functions declared with var name = function() {};     try:         if node.type == ""IDENTIFIER"" and hasattr(node, ""initializer"") and node.initializer.type == ""FUNCTION"":             print str(node.lineno) + "" | function "" + node.name + "" | "" + self.source[node.start:node.initializer.end]     except Exception as e:         pass  def visit_PROPERTY_INIT(self, node):      # Anonymous functions declared as a property of an object     try:         if node.type == ""PROPERTY_INIT"" and node[1].type == ""FUNCTION"":             print str(node.lineno) + "" | function "" + node[0].value + "" | "" + self.source[node.start:node[1].end]     except Exception as e:         pass   def visit(self, root):      call = lambda n: getattr(self, ""visit_%s"" % n.type, self.visit_NOOP)(n)     call(root)     self.look4Childen(root)     for node in root:         self.visit(node)  filepath = r""C:\Users\dward\Dropbox\juggernaut2\juggernaut\parser\test\data\jasmine.js"" outerspace = Visitor(filepath) </code></pre>"
